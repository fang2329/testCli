// Code generated by protoc-gen-go. DO NOT EDIT.
// source: error_code.proto

package net

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 结果码
type RESULT_CODE int32

const (
	RESULT_CODE_RESULT_CODE_FAIL              RESULT_CODE = 0
	RESULT_CODE_RESULT_CODE_SUCCESS           RESULT_CODE = 1
	RESULT_CODE_RESULT_CODE_NOVIP             RESULT_CODE = 2
	RESULT_CODE_RESULT_CODE_CION_ERROR        RESULT_CODE = 3
	RESULT_CODE_RESULT_CODE_PASSWD_ERROR      RESULT_CODE = 4
	RESULT_CODE_RESULT_CODE_NEED_INLOBBY      RESULT_CODE = 5
	RESULT_CODE_RESULT_CODE_REPEAT_GET        RESULT_CODE = 6
	RESULT_CODE_RESULT_CODE_NOT_COND          RESULT_CODE = 7
	RESULT_CODE_RESULT_CODE_ERROR_PARAM       RESULT_CODE = 8
	RESULT_CODE_RESULT_CODE_NOT_TABLE         RESULT_CODE = 9
	RESULT_CODE_RESULT_CODE_NOT_OWER          RESULT_CODE = 10
	RESULT_CODE_RESULT_CODE_BLACKLIST         RESULT_CODE = 11
	RESULT_CODE_RESULT_CODE_NOT_DIAMOND       RESULT_CODE = 12
	RESULT_CODE_RESULT_CODE_ERROR_PLAYERID    RESULT_CODE = 13
	RESULT_CODE_RESULT_CODE_TABLE_FULL        RESULT_CODE = 14
	RESULT_CODE_RESULT_CODE_GAMEING           RESULT_CODE = 15
	RESULT_CODE_RESULT_CODE_ERROR_STATE       RESULT_CODE = 16
	RESULT_CODE_RESULT_CODE_LOGIN_OTHER       RESULT_CODE = 17
	RESULT_CODE_RESULT_CODE_SVR_REPAIR        RESULT_CODE = 18
	RESULT_CODE_RESULT_CODE_CDING             RESULT_CODE = 19
	RESULT_CODE_RESULT_CODE_IP_LIMIT          RESULT_CODE = 20
	RESULT_CODE_RESULT_CODE_CARD_ERROR        RESULT_CODE = 21
	RESULT_CODE_RESULT_CODE_HAS_ZHU           RESULT_CODE = 22
	RESULT_CODE_RESULT_CODE_ZHU_CARD_LACK     RESULT_CODE = 23
	RESULT_CODE_RESULT_CODE_VIP_GRADE_ERROR   RESULT_CODE = 24
	RESULT_CODE_RESULT_CODE_NOT_LIMITS        RESULT_CODE = 25
	RESULT_CODE_RESULT_CODE_MUST_BIGGER_POINT RESULT_CODE = 26
	RESULT_CODE_RESULT_CODE_CANNOT_GIVE_POINT RESULT_CODE = 27
	RESULT_CODE_RESUILT_CODE_RULE_INVAILD     RESULT_CODE = 28
	RESULT_CODE_RESULT_CODE_MUST_HAVE_THREE   RESULT_CODE = 29
)

var RESULT_CODE_name = map[int32]string{
	0:  "RESULT_CODE_FAIL",
	1:  "RESULT_CODE_SUCCESS",
	2:  "RESULT_CODE_NOVIP",
	3:  "RESULT_CODE_CION_ERROR",
	4:  "RESULT_CODE_PASSWD_ERROR",
	5:  "RESULT_CODE_NEED_INLOBBY",
	6:  "RESULT_CODE_REPEAT_GET",
	7:  "RESULT_CODE_NOT_COND",
	8:  "RESULT_CODE_ERROR_PARAM",
	9:  "RESULT_CODE_NOT_TABLE",
	10: "RESULT_CODE_NOT_OWER",
	11: "RESULT_CODE_BLACKLIST",
	12: "RESULT_CODE_NOT_DIAMOND",
	13: "RESULT_CODE_ERROR_PLAYERID",
	14: "RESULT_CODE_TABLE_FULL",
	15: "RESULT_CODE_GAMEING",
	16: "RESULT_CODE_ERROR_STATE",
	17: "RESULT_CODE_LOGIN_OTHER",
	18: "RESULT_CODE_SVR_REPAIR",
	19: "RESULT_CODE_CDING",
	20: "RESULT_CODE_IP_LIMIT",
	21: "RESULT_CODE_CARD_ERROR",
	22: "RESULT_CODE_HAS_ZHU",
	23: "RESULT_CODE_ZHU_CARD_LACK",
	24: "RESULT_CODE_VIP_GRADE_ERROR",
	25: "RESULT_CODE_NOT_LIMITS",
	26: "RESULT_CODE_MUST_BIGGER_POINT",
	27: "RESULT_CODE_CANNOT_GIVE_POINT",
	28: "RESUILT_CODE_RULE_INVAILD",
	29: "RESULT_CODE_MUST_HAVE_THREE",
}
var RESULT_CODE_value = map[string]int32{
	"RESULT_CODE_FAIL":              0,
	"RESULT_CODE_SUCCESS":           1,
	"RESULT_CODE_NOVIP":             2,
	"RESULT_CODE_CION_ERROR":        3,
	"RESULT_CODE_PASSWD_ERROR":      4,
	"RESULT_CODE_NEED_INLOBBY":      5,
	"RESULT_CODE_REPEAT_GET":        6,
	"RESULT_CODE_NOT_COND":          7,
	"RESULT_CODE_ERROR_PARAM":       8,
	"RESULT_CODE_NOT_TABLE":         9,
	"RESULT_CODE_NOT_OWER":          10,
	"RESULT_CODE_BLACKLIST":         11,
	"RESULT_CODE_NOT_DIAMOND":       12,
	"RESULT_CODE_ERROR_PLAYERID":    13,
	"RESULT_CODE_TABLE_FULL":        14,
	"RESULT_CODE_GAMEING":           15,
	"RESULT_CODE_ERROR_STATE":       16,
	"RESULT_CODE_LOGIN_OTHER":       17,
	"RESULT_CODE_SVR_REPAIR":        18,
	"RESULT_CODE_CDING":             19,
	"RESULT_CODE_IP_LIMIT":          20,
	"RESULT_CODE_CARD_ERROR":        21,
	"RESULT_CODE_HAS_ZHU":           22,
	"RESULT_CODE_ZHU_CARD_LACK":     23,
	"RESULT_CODE_VIP_GRADE_ERROR":   24,
	"RESULT_CODE_NOT_LIMITS":        25,
	"RESULT_CODE_MUST_BIGGER_POINT": 26,
	"RESULT_CODE_CANNOT_GIVE_POINT": 27,
	"RESUILT_CODE_RULE_INVAILD":     28,
	"RESULT_CODE_MUST_HAVE_THREE":   29,
}

func (x RESULT_CODE) Enum() *RESULT_CODE {
	p := new(RESULT_CODE)
	*p = x
	return p
}
func (x RESULT_CODE) String() string {
	return proto.EnumName(RESULT_CODE_name, int32(x))
}
func (x *RESULT_CODE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RESULT_CODE_value, data, "RESULT_CODE")
	if err != nil {
		return err
	}
	*x = RESULT_CODE(value)
	return nil
}
func (RESULT_CODE) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

//  任务类型
type MISSION_TYPE int32

const (
	MISSION_TYPE_MISSION_TYPE_PLAY    MISSION_TYPE = 101
	MISSION_TYPE_MISSION_TYPE_WIN     MISSION_TYPE = 102
	MISSION_TYPE_MISSION_TYPE_KILL    MISSION_TYPE = 103
	MISSION_TYPE_MISSION_TYPE_PRESS   MISSION_TYPE = 104
	MISSION_TYPE_MISSION_TYPE_FEEWIN  MISSION_TYPE = 105
	MISSION_TYPE_MISSION_TYPE_FEELOSE MISSION_TYPE = 106
)

var MISSION_TYPE_name = map[int32]string{
	101: "MISSION_TYPE_PLAY",
	102: "MISSION_TYPE_WIN",
	103: "MISSION_TYPE_KILL",
	104: "MISSION_TYPE_PRESS",
	105: "MISSION_TYPE_FEEWIN",
	106: "MISSION_TYPE_FEELOSE",
}
var MISSION_TYPE_value = map[string]int32{
	"MISSION_TYPE_PLAY":    101,
	"MISSION_TYPE_WIN":     102,
	"MISSION_TYPE_KILL":    103,
	"MISSION_TYPE_PRESS":   104,
	"MISSION_TYPE_FEEWIN":  105,
	"MISSION_TYPE_FEELOSE": 106,
}

func (x MISSION_TYPE) Enum() *MISSION_TYPE {
	p := new(MISSION_TYPE)
	*p = x
	return p
}
func (x MISSION_TYPE) String() string {
	return proto.EnumName(MISSION_TYPE_name, int32(x))
}
func (x *MISSION_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MISSION_TYPE_value, data, "MISSION_TYPE")
	if err != nil {
		return err
	}
	*x = MISSION_TYPE(value)
	return nil
}
func (MISSION_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{1} }

// 任务循环类型
type MISSION_CYCLE_TYPE int32

const (
	MISSION_CYCLE_TYPE_MISSION_CYCLE_TYPE_DAY   MISSION_CYCLE_TYPE = 1
	MISSION_CYCLE_TYPE_MISSION_CYCLE_TYPE_WEEK  MISSION_CYCLE_TYPE = 2
	MISSION_CYCLE_TYPE_MISSION_CYCLE_TYPE_MONTH MISSION_CYCLE_TYPE = 3
)

var MISSION_CYCLE_TYPE_name = map[int32]string{
	1: "MISSION_CYCLE_TYPE_DAY",
	2: "MISSION_CYCLE_TYPE_WEEK",
	3: "MISSION_CYCLE_TYPE_MONTH",
}
var MISSION_CYCLE_TYPE_value = map[string]int32{
	"MISSION_CYCLE_TYPE_DAY":   1,
	"MISSION_CYCLE_TYPE_WEEK":  2,
	"MISSION_CYCLE_TYPE_MONTH": 3,
}

func (x MISSION_CYCLE_TYPE) Enum() *MISSION_CYCLE_TYPE {
	p := new(MISSION_CYCLE_TYPE)
	*p = x
	return p
}
func (x MISSION_CYCLE_TYPE) String() string {
	return proto.EnumName(MISSION_CYCLE_TYPE_name, int32(x))
}
func (x *MISSION_CYCLE_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MISSION_CYCLE_TYPE_value, data, "MISSION_CYCLE_TYPE")
	if err != nil {
		return err
	}
	*x = MISSION_CYCLE_TYPE(value)
	return nil
}
func (MISSION_CYCLE_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{2} }

// 领奖标记
type REWARD_FLAG int32

const (
	REWARD_FLAG_REWARD_CLOGIN  REWARD_FLAG = 1
	REWARD_FLAG_REWARD_WLOGIN3 REWARD_FLAG = 2
	REWARD_FLAG_REWARD_WLOGIN5 REWARD_FLAG = 3
	REWARD_FLAG_REWARD_WLOGIN6 REWARD_FLAG = 4
)

var REWARD_FLAG_name = map[int32]string{
	1: "REWARD_CLOGIN",
	2: "REWARD_WLOGIN3",
	3: "REWARD_WLOGIN5",
	4: "REWARD_WLOGIN6",
}
var REWARD_FLAG_value = map[string]int32{
	"REWARD_CLOGIN":  1,
	"REWARD_WLOGIN3": 2,
	"REWARD_WLOGIN5": 3,
	"REWARD_WLOGIN6": 4,
}

func (x REWARD_FLAG) Enum() *REWARD_FLAG {
	p := new(REWARD_FLAG)
	*p = x
	return p
}
func (x REWARD_FLAG) String() string {
	return proto.EnumName(REWARD_FLAG_name, int32(x))
}
func (x *REWARD_FLAG) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(REWARD_FLAG_value, data, "REWARD_FLAG")
	if err != nil {
		return err
	}
	*x = REWARD_FLAG(value)
	return nil
}
func (REWARD_FLAG) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{3} }

// 游戏类型
type GAME_CATE_TYPE int32

const (
	GAME_CATE_TYPE_GAME_CATE_LAND      GAME_CATE_TYPE = 1
	GAME_CATE_TYPE_GAME_CATE_SHOWHAND  GAME_CATE_TYPE = 2
	GAME_CATE_TYPE_GAME_CATE_BULLFIGHT GAME_CATE_TYPE = 3
	GAME_CATE_TYPE_GAME_CATE_TEXAS     GAME_CATE_TYPE = 4
	GAME_CATE_TYPE_GAME_CATE_ZAJINHUA  GAME_CATE_TYPE = 5
	GAME_CATE_TYPE_GAME_CATE_NIUNIU    GAME_CATE_TYPE = 6
	GAME_CATE_TYPE_GAME_CATE_BACCARAT  GAME_CATE_TYPE = 7
	GAME_CATE_TYPE_GAME_CATE_SANGONG   GAME_CATE_TYPE = 8
	GAME_CATE_TYPE_GAME_CATE_PAIJIU    GAME_CATE_TYPE = 9
	GAME_CATE_TYPE_GAME_CATE_THIRTEEN  GAME_CATE_TYPE = 10
	GAME_CATE_TYPE_GAME_CATE_BIGTWO    GAME_CATE_TYPE = 11
	GAME_CATE_TYPE_GAME_CATE_POKER240  GAME_CATE_TYPE = 13
	GAME_CATE_TYPE_GAME_CATE_MAX_TYPE  GAME_CATE_TYPE = 14
)

var GAME_CATE_TYPE_name = map[int32]string{
	1:  "GAME_CATE_LAND",
	2:  "GAME_CATE_SHOWHAND",
	3:  "GAME_CATE_BULLFIGHT",
	4:  "GAME_CATE_TEXAS",
	5:  "GAME_CATE_ZAJINHUA",
	6:  "GAME_CATE_NIUNIU",
	7:  "GAME_CATE_BACCARAT",
	8:  "GAME_CATE_SANGONG",
	9:  "GAME_CATE_PAIJIU",
	10: "GAME_CATE_THIRTEEN",
	11: "GAME_CATE_BIGTWO",
	13: "GAME_CATE_POKER240",
	14: "GAME_CATE_MAX_TYPE",
}
var GAME_CATE_TYPE_value = map[string]int32{
	"GAME_CATE_LAND":      1,
	"GAME_CATE_SHOWHAND":  2,
	"GAME_CATE_BULLFIGHT": 3,
	"GAME_CATE_TEXAS":     4,
	"GAME_CATE_ZAJINHUA":  5,
	"GAME_CATE_NIUNIU":    6,
	"GAME_CATE_BACCARAT":  7,
	"GAME_CATE_SANGONG":   8,
	"GAME_CATE_PAIJIU":    9,
	"GAME_CATE_THIRTEEN":  10,
	"GAME_CATE_BIGTWO":    11,
	"GAME_CATE_POKER240":  13,
	"GAME_CATE_MAX_TYPE":  14,
}

func (x GAME_CATE_TYPE) Enum() *GAME_CATE_TYPE {
	p := new(GAME_CATE_TYPE)
	*p = x
	return p
}
func (x GAME_CATE_TYPE) String() string {
	return proto.EnumName(GAME_CATE_TYPE_name, int32(x))
}
func (x *GAME_CATE_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GAME_CATE_TYPE_value, data, "GAME_CATE_TYPE")
	if err != nil {
		return err
	}
	*x = GAME_CATE_TYPE(value)
	return nil
}
func (GAME_CATE_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{4} }

type GAME_SUB_TYPE int32

const (
	GAME_SUB_TYPE_GAME_SUB_COMMON  GAME_SUB_TYPE = 1
	GAME_SUB_TYPE_GAME_SUB_MATCH   GAME_SUB_TYPE = 2
	GAME_SUB_TYPE_GAME_SUB_PRIVATE GAME_SUB_TYPE = 3
)

var GAME_SUB_TYPE_name = map[int32]string{
	1: "GAME_SUB_COMMON",
	2: "GAME_SUB_MATCH",
	3: "GAME_SUB_PRIVATE",
}
var GAME_SUB_TYPE_value = map[string]int32{
	"GAME_SUB_COMMON":  1,
	"GAME_SUB_MATCH":   2,
	"GAME_SUB_PRIVATE": 3,
}

func (x GAME_SUB_TYPE) Enum() *GAME_SUB_TYPE {
	p := new(GAME_SUB_TYPE)
	*p = x
	return p
}
func (x GAME_SUB_TYPE) String() string {
	return proto.EnumName(GAME_SUB_TYPE_name, int32(x))
}
func (x *GAME_SUB_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GAME_SUB_TYPE_value, data, "GAME_SUB_TYPE")
	if err != nil {
		return err
	}
	*x = GAME_SUB_TYPE(value)
	return nil
}
func (GAME_SUB_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{5} }

// 兑换类型
type EXCHANGE_TYPE int32

const (
	EXCHANGE_TYPE_EXCHANGE_TYPE_SCORE EXCHANGE_TYPE = 1
	EXCHANGE_TYPE_EXCHANGE_TYPE_COIN  EXCHANGE_TYPE = 2
)

var EXCHANGE_TYPE_name = map[int32]string{
	1: "EXCHANGE_TYPE_SCORE",
	2: "EXCHANGE_TYPE_COIN",
}
var EXCHANGE_TYPE_value = map[string]int32{
	"EXCHANGE_TYPE_SCORE": 1,
	"EXCHANGE_TYPE_COIN":  2,
}

func (x EXCHANGE_TYPE) Enum() *EXCHANGE_TYPE {
	p := new(EXCHANGE_TYPE)
	*p = x
	return p
}
func (x EXCHANGE_TYPE) String() string {
	return proto.EnumName(EXCHANGE_TYPE_name, int32(x))
}
func (x *EXCHANGE_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EXCHANGE_TYPE_value, data, "EXCHANGE_TYPE")
	if err != nil {
		return err
	}
	*x = EXCHANGE_TYPE(value)
	return nil
}
func (EXCHANGE_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{6} }

// 房间消费类型
type ROOM_CONSUME_TYPE int32

const (
	ROOM_CONSUME_TYPE_ROOM_CONSUME_TYPE_SCORE ROOM_CONSUME_TYPE = 1
	ROOM_CONSUME_TYPE_ROOM_CONSUME_TYPE_COIN  ROOM_CONSUME_TYPE = 2
)

var ROOM_CONSUME_TYPE_name = map[int32]string{
	1: "ROOM_CONSUME_TYPE_SCORE",
	2: "ROOM_CONSUME_TYPE_COIN",
}
var ROOM_CONSUME_TYPE_value = map[string]int32{
	"ROOM_CONSUME_TYPE_SCORE": 1,
	"ROOM_CONSUME_TYPE_COIN":  2,
}

func (x ROOM_CONSUME_TYPE) Enum() *ROOM_CONSUME_TYPE {
	p := new(ROOM_CONSUME_TYPE)
	*p = x
	return p
}
func (x ROOM_CONSUME_TYPE) String() string {
	return proto.EnumName(ROOM_CONSUME_TYPE_name, int32(x))
}
func (x *ROOM_CONSUME_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ROOM_CONSUME_TYPE_value, data, "ROOM_CONSUME_TYPE")
	if err != nil {
		return err
	}
	*x = ROOM_CONSUME_TYPE(value)
	return nil
}
func (ROOM_CONSUME_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{7} }

// 房间发牌类型
type ROOM_DEAL_TYPE int32

const (
	ROOM_DEAL_TYPE_ROOM_DEAL_TYPE_SOLO  ROOM_DEAL_TYPE = 1
	ROOM_DEAL_TYPE_ROOM_DEAL_TYPE_THREE ROOM_DEAL_TYPE = 2
	ROOM_DEAL_TYPE_ROOM_DEAL_TYPE_SEVEN ROOM_DEAL_TYPE = 3
)

var ROOM_DEAL_TYPE_name = map[int32]string{
	1: "ROOM_DEAL_TYPE_SOLO",
	2: "ROOM_DEAL_TYPE_THREE",
	3: "ROOM_DEAL_TYPE_SEVEN",
}
var ROOM_DEAL_TYPE_value = map[string]int32{
	"ROOM_DEAL_TYPE_SOLO":  1,
	"ROOM_DEAL_TYPE_THREE": 2,
	"ROOM_DEAL_TYPE_SEVEN": 3,
}

func (x ROOM_DEAL_TYPE) Enum() *ROOM_DEAL_TYPE {
	p := new(ROOM_DEAL_TYPE)
	*p = x
	return p
}
func (x ROOM_DEAL_TYPE) String() string {
	return proto.EnumName(ROOM_DEAL_TYPE_name, int32(x))
}
func (x *ROOM_DEAL_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ROOM_DEAL_TYPE_value, data, "ROOM_DEAL_TYPE")
	if err != nil {
		return err
	}
	*x = ROOM_DEAL_TYPE(value)
	return nil
}
func (ROOM_DEAL_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{8} }

// 桌子台费类型
type TABLE_FEE_TYPE int32

const (
	TABLE_FEE_TYPE_TABLE_FEE_TYPE_NO      TABLE_FEE_TYPE = 0
	TABLE_FEE_TYPE_TABLE_FEE_TYPE_ALLBASE TABLE_FEE_TYPE = 1
	TABLE_FEE_TYPE_TABLE_FEE_TYPE_WIN     TABLE_FEE_TYPE = 2
)

var TABLE_FEE_TYPE_name = map[int32]string{
	0: "TABLE_FEE_TYPE_NO",
	1: "TABLE_FEE_TYPE_ALLBASE",
	2: "TABLE_FEE_TYPE_WIN",
}
var TABLE_FEE_TYPE_value = map[string]int32{
	"TABLE_FEE_TYPE_NO":      0,
	"TABLE_FEE_TYPE_ALLBASE": 1,
	"TABLE_FEE_TYPE_WIN":     2,
}

func (x TABLE_FEE_TYPE) Enum() *TABLE_FEE_TYPE {
	p := new(TABLE_FEE_TYPE)
	*p = x
	return p
}
func (x TABLE_FEE_TYPE) String() string {
	return proto.EnumName(TABLE_FEE_TYPE_name, int32(x))
}
func (x *TABLE_FEE_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TABLE_FEE_TYPE_value, data, "TABLE_FEE_TYPE")
	if err != nil {
		return err
	}
	*x = TABLE_FEE_TYPE(value)
	return nil
}
func (TABLE_FEE_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{9} }

// 桌子状态
type TABLE_STATE int32

const (
	TABLE_STATE_TABLE_STATE_FREE     TABLE_STATE = 1
	TABLE_STATE_TABLE_STATE_CALL     TABLE_STATE = 2
	TABLE_STATE_TABLE_STATE_PLAY     TABLE_STATE = 3
	TABLE_STATE_TABLE_STATE_WAIT     TABLE_STATE = 4
	TABLE_STATE_TABLE_STATE_GAME_END TABLE_STATE = 5
)

var TABLE_STATE_name = map[int32]string{
	1: "TABLE_STATE_FREE",
	2: "TABLE_STATE_CALL",
	3: "TABLE_STATE_PLAY",
	4: "TABLE_STATE_WAIT",
	5: "TABLE_STATE_GAME_END",
}
var TABLE_STATE_value = map[string]int32{
	"TABLE_STATE_FREE":     1,
	"TABLE_STATE_CALL":     2,
	"TABLE_STATE_PLAY":     3,
	"TABLE_STATE_WAIT":     4,
	"TABLE_STATE_GAME_END": 5,
}

func (x TABLE_STATE) Enum() *TABLE_STATE {
	p := new(TABLE_STATE)
	*p = x
	return p
}
func (x TABLE_STATE) String() string {
	return proto.EnumName(TABLE_STATE_name, int32(x))
}
func (x *TABLE_STATE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TABLE_STATE_value, data, "TABLE_STATE")
	if err != nil {
		return err
	}
	*x = TABLE_STATE(value)
	return nil
}
func (TABLE_STATE) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{10} }

// 牛牛桌子状态
type TABLE_STATE_NIUNIU int32

const (
	TABLE_STATE_NIUNIU_TABLE_STATE_NIUNIU_FREE         TABLE_STATE_NIUNIU = 1
	TABLE_STATE_NIUNIU_TABLE_STATE_NIUNIU_PLACE_JETTON TABLE_STATE_NIUNIU = 2
	TABLE_STATE_NIUNIU_TABLE_STATE_NIUNIU_GAME_END     TABLE_STATE_NIUNIU = 3
)

var TABLE_STATE_NIUNIU_name = map[int32]string{
	1: "TABLE_STATE_NIUNIU_FREE",
	2: "TABLE_STATE_NIUNIU_PLACE_JETTON",
	3: "TABLE_STATE_NIUNIU_GAME_END",
}
var TABLE_STATE_NIUNIU_value = map[string]int32{
	"TABLE_STATE_NIUNIU_FREE":         1,
	"TABLE_STATE_NIUNIU_PLACE_JETTON": 2,
	"TABLE_STATE_NIUNIU_GAME_END":     3,
}

func (x TABLE_STATE_NIUNIU) Enum() *TABLE_STATE_NIUNIU {
	p := new(TABLE_STATE_NIUNIU)
	*p = x
	return p
}
func (x TABLE_STATE_NIUNIU) String() string {
	return proto.EnumName(TABLE_STATE_NIUNIU_name, int32(x))
}
func (x *TABLE_STATE_NIUNIU) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TABLE_STATE_NIUNIU_value, data, "TABLE_STATE_NIUNIU")
	if err != nil {
		return err
	}
	*x = TABLE_STATE_NIUNIU(value)
	return nil
}
func (TABLE_STATE_NIUNIU) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{11} }

func init() {
	proto.RegisterEnum("net.RESULT_CODE", RESULT_CODE_name, RESULT_CODE_value)
	proto.RegisterEnum("net.MISSION_TYPE", MISSION_TYPE_name, MISSION_TYPE_value)
	proto.RegisterEnum("net.MISSION_CYCLE_TYPE", MISSION_CYCLE_TYPE_name, MISSION_CYCLE_TYPE_value)
	proto.RegisterEnum("net.REWARD_FLAG", REWARD_FLAG_name, REWARD_FLAG_value)
	proto.RegisterEnum("net.GAME_CATE_TYPE", GAME_CATE_TYPE_name, GAME_CATE_TYPE_value)
	proto.RegisterEnum("net.GAME_SUB_TYPE", GAME_SUB_TYPE_name, GAME_SUB_TYPE_value)
	proto.RegisterEnum("net.EXCHANGE_TYPE", EXCHANGE_TYPE_name, EXCHANGE_TYPE_value)
	proto.RegisterEnum("net.ROOM_CONSUME_TYPE", ROOM_CONSUME_TYPE_name, ROOM_CONSUME_TYPE_value)
	proto.RegisterEnum("net.ROOM_DEAL_TYPE", ROOM_DEAL_TYPE_name, ROOM_DEAL_TYPE_value)
	proto.RegisterEnum("net.TABLE_FEE_TYPE", TABLE_FEE_TYPE_name, TABLE_FEE_TYPE_value)
	proto.RegisterEnum("net.TABLE_STATE", TABLE_STATE_name, TABLE_STATE_value)
	proto.RegisterEnum("net.TABLE_STATE_NIUNIU", TABLE_STATE_NIUNIU_name, TABLE_STATE_NIUNIU_value)
}

func init() { proto.RegisterFile("error_code.proto", fileDescriptor16) }

var fileDescriptor16 = []byte{
	// 904 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x94, 0xcd, 0x6e, 0xe3, 0x36,
	0x10, 0xc7, 0xd7, 0x76, 0x92, 0xdd, 0x65, 0x36, 0xde, 0x09, 0xf3, 0x9d, 0x6c, 0xba, 0x28, 0x7a,
	0xd3, 0xa1, 0x28, 0xfa, 0x75, 0x2e, 0x45, 0x8d, 0x25, 0x26, 0x14, 0x29, 0x90, 0x94, 0x15, 0xa7,
	0x2d, 0x78, 0x68, 0xd3, 0x4f, 0xa0, 0x29, 0x82, 0x05, 0x7a, 0xec, 0x93, 0xf4, 0x49, 0xfa, 0x2e,
	0x7d, 0x96, 0x82, 0xb2, 0xec, 0x48, 0xb4, 0x6f, 0xd2, 0xef, 0x4f, 0xce, 0xfc, 0x39, 0x43, 0x0e,
	0x81, 0x87, 0xa7, 0xa7, 0xc7, 0x27, 0xff, 0xc3, 0xe3, 0x8f, 0x0f, 0x9f, 0xfe, 0xf9, 0xf4, 0xf8,
	0xe1, 0x91, 0x4e, 0xfe, 0x78, 0xf8, 0x90, 0xfc, 0xb7, 0x47, 0xf6, 0x0d, 0xda, 0x5a, 0x3a, 0xcf,
	0x75, 0x86, 0xf4, 0x98, 0x40, 0xef, 0xd7, 0xcf, 0x98, 0x90, 0xf0, 0x82, 0x9e, 0x91, 0xa3, 0x3e,
	0xb5, 0x35, 0xe7, 0x68, 0x2d, 0x8c, 0xe8, 0x09, 0x39, 0xec, 0x0b, 0x4a, 0xcf, 0x45, 0x05, 0x63,
	0x7a, 0x49, 0x4e, 0xfb, 0x98, 0x0b, 0xad, 0x3c, 0x1a, 0xa3, 0x0d, 0x4c, 0xe8, 0x3b, 0x72, 0xde,
	0xd7, 0x2a, 0x66, 0x6d, 0x93, 0x75, 0xea, 0x4e, 0xac, 0x2a, 0xc4, 0xcc, 0x0b, 0x25, 0x75, 0x9a,
	0x2e, 0x60, 0x37, 0x8e, 0x6b, 0xb0, 0x42, 0xe6, 0x7c, 0x8e, 0x0e, 0xf6, 0xe8, 0x39, 0x39, 0x1e,
	0x5a, 0x09, 0x1f, 0x2a, 0x83, 0x97, 0xf4, 0x8a, 0x9c, 0xf5, 0x95, 0x36, 0x95, 0xaf, 0x98, 0x61,
	0x25, 0xbc, 0xa2, 0x17, 0xe4, 0x24, 0xde, 0xe6, 0x58, 0x2a, 0x11, 0x5e, 0x6f, 0x8b, 0xa8, 0x1b,
	0x34, 0x40, 0xe2, 0x4d, 0xa9, 0x64, 0xfc, 0x56, 0x0a, 0xeb, 0x60, 0x3f, 0x4e, 0x16, 0x36, 0x65,
	0x82, 0x95, 0xc1, 0xc9, 0x1b, 0xfa, 0x11, 0xb9, 0xdc, 0xe2, 0x44, 0xb2, 0x05, 0x1a, 0x91, 0xc1,
	0x41, 0x7c, 0xbe, 0xd6, 0x88, 0x9f, 0xd5, 0x52, 0xc2, 0x34, 0xee, 0x41, 0xce, 0x4a, 0x14, 0x2a,
	0x87, 0xb7, 0xdb, 0x8f, 0x67, 0x1d, 0x73, 0x08, 0x10, 0x8b, 0x52, 0xe7, 0x42, 0x79, 0xed, 0x0a,
	0x34, 0x70, 0x18, 0xa7, 0xb3, 0x73, 0x13, 0x4a, 0xca, 0x84, 0x01, 0x1a, 0x77, 0x96, 0x67, 0x21,
	0xd9, 0x51, 0x5c, 0x13, 0x51, 0x79, 0x29, 0x4a, 0xe1, 0xe0, 0x78, 0xa3, 0xe7, 0xcc, 0xac, 0xba,
	0x7a, 0x12, 0x7b, 0x2f, 0x98, 0xf5, 0xf7, 0x45, 0x0d, 0xa7, 0xf4, 0x9a, 0x5c, 0xf4, 0x85, 0xfb,
	0xa2, 0x5e, 0x6e, 0x0c, 0x05, 0x85, 0x33, 0xfa, 0x9e, 0x5c, 0xf5, 0xe5, 0xb9, 0xa8, 0x7c, 0x6e,
	0xd8, 0xea, 0x90, 0x70, 0x1e, 0x27, 0x0d, 0xd5, 0x6e, 0xfd, 0x58, 0xb8, 0xa0, 0x1f, 0x93, 0xeb,
	0xbe, 0x56, 0xd6, 0xd6, 0xf9, 0x54, 0xe4, 0x39, 0x1a, 0x5f, 0x69, 0xa1, 0x1c, 0x5c, 0xc6, 0x4b,
	0x38, 0x53, 0x21, 0x42, 0x2e, 0xe6, 0xd8, 0x2d, 0xb9, 0x5a, 0x39, 0x14, 0xeb, 0x3b, 0x57, 0x4b,
	0xf4, 0x42, 0xcd, 0x99, 0x90, 0x19, 0xbc, 0x8b, 0x1d, 0xb6, 0x49, 0x0a, 0x36, 0x47, 0xef, 0x0a,
	0x83, 0x08, 0xd7, 0xc9, 0x3f, 0x23, 0xf2, 0xa6, 0x14, 0xd6, 0x86, 0x27, 0xe0, 0x16, 0x15, 0x86,
	0xc2, 0xf6, 0xff, 0xdb, 0xf6, 0xc3, 0x43, 0x78, 0x78, 0x03, 0xdc, 0x08, 0x05, 0x3f, 0x6d, 0x2c,
	0xbe, 0x15, 0x52, 0xc2, 0xcf, 0xf4, 0x94, 0xd0, 0x61, 0x0c, 0x13, 0x9e, 0xe3, 0x2f, 0xa1, 0xce,
	0x03, 0x3e, 0x43, 0x0c, 0x71, 0x7e, 0x0d, 0x6d, 0x8b, 0x05, 0xa9, 0x2d, 0xc2, 0x6f, 0xc9, 0xef,
	0xcf, 0xa1, 0xf8, 0x82, 0x4b, 0x5c, 0x9a, 0xbc, 0x24, 0xa7, 0x9b, 0xd4, 0x67, 0x6c, 0x01, 0xa3,
	0x70, 0xa5, 0xb6, 0x68, 0x0d, 0xe2, 0x2d, 0x8c, 0xc3, 0xfb, 0xdd, 0x22, 0x96, 0x5a, 0xb9, 0x02,
	0x26, 0xc9, 0x77, 0x61, 0xd8, 0x34, 0xa1, 0xc1, 0x33, 0xc9, 0x72, 0x7a, 0x48, 0x0e, 0xba, 0x5f,
	0xde, 0x5e, 0x4c, 0x18, 0x51, 0x4a, 0xa6, 0x1d, 0x6a, 0x5a, 0xf4, 0x05, 0x8c, 0x37, 0xd8, 0x57,
	0x30, 0xd9, 0x60, 0x5f, 0xc3, 0x4e, 0xf2, 0xef, 0x98, 0x4c, 0xc3, 0xb3, 0xf0, 0x9c, 0xb9, 0xee,
	0x1c, 0xb4, 0x4f, 0x24, 0x53, 0x19, 0x8c, 0x42, 0xf1, 0x9e, 0x99, 0x2d, 0x74, 0x53, 0x04, 0x3e,
	0x0e, 0xc5, 0x7b, 0xe6, 0x69, 0x2d, 0xe5, 0x4c, 0xe4, 0x85, 0x83, 0x09, 0x3d, 0x22, 0x6f, 0x7b,
	0x61, 0xf1, 0x8e, 0x59, 0xd8, 0x19, 0x46, 0xb9, 0x67, 0x37, 0x42, 0x15, 0x35, 0x83, 0xdd, 0xd0,
	0xc7, 0x67, 0xae, 0x44, 0xad, 0x44, 0x0d, 0x7b, 0xc3, 0xd5, 0x29, 0xe3, 0x9c, 0x19, 0xe6, 0xe0,
	0x65, 0xe8, 0x6f, 0xcf, 0x0b, 0x53, 0xb9, 0x56, 0x39, 0xbc, 0x1a, 0x06, 0xa9, 0x98, 0xb8, 0x11,
	0x35, 0xbc, 0x1e, 0x06, 0x71, 0x85, 0x30, 0x0e, 0x51, 0x01, 0x19, 0xae, 0x4e, 0x45, 0xee, 0x1a,
	0x0d, 0xfb, 0xc3, 0xd5, 0x95, 0xbe, 0x45, 0xf3, 0xf9, 0x97, 0x9f, 0xc1, 0xc1, 0x90, 0x97, 0xec,
	0xae, 0x2d, 0x14, 0x4c, 0x13, 0x45, 0x0e, 0x5a, 0x6e, 0xeb, 0x74, 0x59, 0xbb, 0xd5, 0xb1, 0x03,
	0xe0, 0xba, 0x2c, 0x75, 0xd7, 0x9f, 0x35, 0x2c, 0x99, 0xe3, 0x05, 0x8c, 0xd7, 0xf9, 0x03, 0xab,
	0x8c, 0x98, 0x87, 0xc9, 0x33, 0x49, 0xbe, 0x21, 0x07, 0x78, 0xc7, 0x0b, 0xa6, 0xf2, 0xae, 0x17,
	0x67, 0xe4, 0x68, 0x00, 0xbc, 0xe5, 0xda, 0xe0, 0xb2, 0x21, 0x43, 0x81, 0x6b, 0xa1, 0x60, 0x9c,
	0x48, 0x72, 0x68, 0xb4, 0x2e, 0xc3, 0x18, 0xb7, 0x75, 0xd9, 0x45, 0x09, 0x03, 0x2d, 0x86, 0xeb,
	0x48, 0x61, 0x1c, 0x6c, 0x88, 0x5d, 0xb4, 0xef, 0xc9, 0xb4, 0xd5, 0x32, 0x64, 0x72, 0x6d, 0x68,
	0x48, 0xbc, 0xd5, 0x52, 0xc3, 0xa8, 0x1d, 0x72, 0x43, 0x61, 0xf9, 0x9a, 0xc7, 0x5b, 0x14, 0x8b,
	0x73, 0x54, 0x30, 0x49, 0xbe, 0x25, 0xd3, 0x6e, 0x5c, 0x23, 0xae, 0x1f, 0xfa, 0x90, 0x78, 0xa5,
	0xe1, 0x45, 0xf0, 0x18, 0x61, 0x26, 0x65, 0xca, 0x6c, 0x57, 0x89, 0x48, 0x6b, 0x5a, 0xef, 0x7f,
	0x93, 0xfd, 0x25, 0x6f, 0xc7, 0x7a, 0x28, 0x78, 0xef, 0xd7, 0xcf, 0x82, 0xb7, 0x51, 0x4c, 0x39,
	0x93, 0x72, 0xd9, 0x9c, 0x3e, 0x6d, 0xa7, 0xcd, 0x24, 0xa6, 0x0d, 0x13, 0x0e, 0x76, 0xc2, 0xe9,
	0xfa, 0xb4, 0x6d, 0x2a, 0xaa, 0x0c, 0x76, 0x93, 0xbf, 0x56, 0xc6, 0x96, 0xca, 0xf2, 0x5e, 0x87,
	0x5e, 0x6c, 0xd2, 0x95, 0x9d, 0x4f, 0xc8, 0xfb, 0x2d, 0x62, 0x25, 0x19, 0x47, 0x7f, 0x83, 0xce,
	0x69, 0x05, 0xe3, 0x30, 0x3e, 0xb7, 0x2c, 0x5a, 0x27, 0x9e, 0xfc, 0x1f, 0x00, 0x00, 0xff, 0xff,
	0x36, 0x44, 0x8a, 0x8c, 0xb7, 0x08, 0x00, 0x00,
}
