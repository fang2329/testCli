// Code generated by protoc-gen-go. DO NOT EDIT.
// source: thirteen_logic_msg.proto

package net

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 游戏状态
type MsgThirteenGameInfoFreeRep struct {
	TimeLeave        *uint32 `protobuf:"varint,1,opt,name=time_leave" json:"time_leave,omitempty"`
	BankerId         *uint32 `protobuf:"varint,2,opt,name=banker_id" json:"banker_id,omitempty"`
	CurRound         *uint32 `protobuf:"varint,3,opt,name=cur_round" json:"cur_round,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MsgThirteenGameInfoFreeRep) Reset()                    { *m = MsgThirteenGameInfoFreeRep{} }
func (m *MsgThirteenGameInfoFreeRep) String() string            { return proto.CompactTextString(m) }
func (*MsgThirteenGameInfoFreeRep) ProtoMessage()               {}
func (*MsgThirteenGameInfoFreeRep) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *MsgThirteenGameInfoFreeRep) GetTimeLeave() uint32 {
	if m != nil && m.TimeLeave != nil {
		return *m.TimeLeave
	}
	return 0
}

func (m *MsgThirteenGameInfoFreeRep) GetBankerId() uint32 {
	if m != nil && m.BankerId != nil {
		return *m.BankerId
	}
	return 0
}

func (m *MsgThirteenGameInfoFreeRep) GetCurRound() uint32 {
	if m != nil && m.CurRound != nil {
		return *m.CurRound
	}
	return 0
}

type MsgThirteenGameInfoPlayRep struct {
	TableCards       []*MsgCards `protobuf:"bytes,1,rep,name=table_cards" json:"table_cards,omitempty"`
	GameStatus       *uint32     `protobuf:"varint,2,opt,name=game_status" json:"game_status,omitempty"`
	ShowCards        []uint32    `protobuf:"varint,3,rep,name=show_cards" json:"show_cards,omitempty"`
	PlayerStatus     []uint32    `protobuf:"varint,4,rep,name=player_status" json:"player_status,omitempty"`
	TimeLeave        *uint32     `protobuf:"varint,5,opt,name=time_leave" json:"time_leave,omitempty"`
	SpecialCards     []uint32    `protobuf:"varint,6,rep,name=special_cards" json:"special_cards,omitempty"`
	CurRound         *uint32     `protobuf:"varint,7,opt,name=cur_round" json:"cur_round,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *MsgThirteenGameInfoPlayRep) Reset()                    { *m = MsgThirteenGameInfoPlayRep{} }
func (m *MsgThirteenGameInfoPlayRep) String() string            { return proto.CompactTextString(m) }
func (*MsgThirteenGameInfoPlayRep) ProtoMessage()               {}
func (*MsgThirteenGameInfoPlayRep) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *MsgThirteenGameInfoPlayRep) GetTableCards() []*MsgCards {
	if m != nil {
		return m.TableCards
	}
	return nil
}

func (m *MsgThirteenGameInfoPlayRep) GetGameStatus() uint32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *MsgThirteenGameInfoPlayRep) GetShowCards() []uint32 {
	if m != nil {
		return m.ShowCards
	}
	return nil
}

func (m *MsgThirteenGameInfoPlayRep) GetPlayerStatus() []uint32 {
	if m != nil {
		return m.PlayerStatus
	}
	return nil
}

func (m *MsgThirteenGameInfoPlayRep) GetTimeLeave() uint32 {
	if m != nil && m.TimeLeave != nil {
		return *m.TimeLeave
	}
	return 0
}

func (m *MsgThirteenGameInfoPlayRep) GetSpecialCards() []uint32 {
	if m != nil {
		return m.SpecialCards
	}
	return nil
}

func (m *MsgThirteenGameInfoPlayRep) GetCurRound() uint32 {
	if m != nil && m.CurRound != nil {
		return *m.CurRound
	}
	return 0
}

// 游戏开始
type MsgThirteenStartRep struct {
	CurRound         *uint32 `protobuf:"varint,1,opt,name=cur_round" json:"cur_round,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MsgThirteenStartRep) Reset()                    { *m = MsgThirteenStartRep{} }
func (m *MsgThirteenStartRep) String() string            { return proto.CompactTextString(m) }
func (*MsgThirteenStartRep) ProtoMessage()               {}
func (*MsgThirteenStartRep) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *MsgThirteenStartRep) GetCurRound() uint32 {
	if m != nil && m.CurRound != nil {
		return *m.CurRound
	}
	return 0
}

// 发牌
type MsgThirteenSendCardRep struct {
	Cards            []uint32 `protobuf:"varint,1,rep,name=cards" json:"cards,omitempty"`
	SpCardType       *uint32  `protobuf:"varint,2,opt,name=sp_card_type" json:"sp_card_type,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *MsgThirteenSendCardRep) Reset()                    { *m = MsgThirteenSendCardRep{} }
func (m *MsgThirteenSendCardRep) String() string            { return proto.CompactTextString(m) }
func (*MsgThirteenSendCardRep) ProtoMessage()               {}
func (*MsgThirteenSendCardRep) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *MsgThirteenSendCardRep) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *MsgThirteenSendCardRep) GetSpCardType() uint32 {
	if m != nil && m.SpCardType != nil {
		return *m.SpCardType
	}
	return 0
}

// 摆牌
type MsgThirteenChangeCard struct {
	Cards            []uint32 `protobuf:"varint,1,rep,name=cards" json:"cards,omitempty"`
	IsShow           *uint32  `protobuf:"varint,2,opt,name=is_show" json:"is_show,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *MsgThirteenChangeCard) Reset()                    { *m = MsgThirteenChangeCard{} }
func (m *MsgThirteenChangeCard) String() string            { return proto.CompactTextString(m) }
func (*MsgThirteenChangeCard) ProtoMessage()               {}
func (*MsgThirteenChangeCard) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *MsgThirteenChangeCard) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *MsgThirteenChangeCard) GetIsShow() uint32 {
	if m != nil && m.IsShow != nil {
		return *m.IsShow
	}
	return 0
}

type MsgThirteenChangeCardRep struct {
	OperId           *uint32  `protobuf:"varint,1,opt,name=oper_id" json:"oper_id,omitempty"`
	Result           *uint32  `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	Cards            []uint32 `protobuf:"varint,3,rep,name=cards" json:"cards,omitempty"`
	CardType         []uint32 `protobuf:"varint,4,rep,name=card_type" json:"card_type,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *MsgThirteenChangeCardRep) Reset()                    { *m = MsgThirteenChangeCardRep{} }
func (m *MsgThirteenChangeCardRep) String() string            { return proto.CompactTextString(m) }
func (*MsgThirteenChangeCardRep) ProtoMessage()               {}
func (*MsgThirteenChangeCardRep) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *MsgThirteenChangeCardRep) GetOperId() uint32 {
	if m != nil && m.OperId != nil {
		return *m.OperId
	}
	return 0
}

func (m *MsgThirteenChangeCardRep) GetResult() uint32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *MsgThirteenChangeCardRep) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *MsgThirteenChangeCardRep) GetCardType() []uint32 {
	if m != nil {
		return m.CardType
	}
	return nil
}

// 游戏结束
type MsgThirteenGameEnd struct {
	TimeLeave        *uint32     `protobuf:"varint,1,opt,name=time_leave" json:"time_leave,omitempty"`
	TableCards       []*MsgCards `protobuf:"bytes,2,rep,name=table_cards" json:"table_cards,omitempty"`
	SpCardTypes      []uint32    `protobuf:"varint,3,rep,name=sp_card_types" json:"sp_card_types,omitempty"`
	SpWinScore       []int32     `protobuf:"varint,4,rep,name=sp_win_score" json:"sp_win_score,omitempty"`
	HandleCardType   []*MsgShuzu `protobuf:"bytes,5,rep,name=handle_card_type" json:"handle_card_type,omitempty"`
	HandleWinScore   []*MsgShuzu `protobuf:"bytes,6,rep,name=handle_win_score" json:"handle_win_score,omitempty"`
	ExtraWinScore    []*MsgShuzu `protobuf:"bytes,7,rep,name=extra_win_score" json:"extra_win_score,omitempty"`
	ShootList        []*MsgShuzu `protobuf:"bytes,8,rep,name=shoot_list" json:"shoot_list,omitempty"`
	ShootWinScore    []*MsgShuzu `protobuf:"bytes,9,rep,name=shoot_win_score" json:"shoot_win_score,omitempty"`
	PlayerScore      []int64     `protobuf:"varint,10,rep,name=player_score" json:"player_score,omitempty"`
	PlayerWinScore   []int64     `protobuf:"varint,11,rep,name=player_win_score" json:"player_win_score,omitempty"`
	IsConnected      *uint32     `protobuf:"varint,12,opt,name=is_connected" json:"is_connected,omitempty"`
	PlayerStatus     []uint32    `protobuf:"varint,13,rep,name=player_status" json:"player_status,omitempty"`
	CurRound         *uint32     `protobuf:"varint,14,opt,name=cur_round" json:"cur_round,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *MsgThirteenGameEnd) Reset()                    { *m = MsgThirteenGameEnd{} }
func (m *MsgThirteenGameEnd) String() string            { return proto.CompactTextString(m) }
func (*MsgThirteenGameEnd) ProtoMessage()               {}
func (*MsgThirteenGameEnd) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *MsgThirteenGameEnd) GetTimeLeave() uint32 {
	if m != nil && m.TimeLeave != nil {
		return *m.TimeLeave
	}
	return 0
}

func (m *MsgThirteenGameEnd) GetTableCards() []*MsgCards {
	if m != nil {
		return m.TableCards
	}
	return nil
}

func (m *MsgThirteenGameEnd) GetSpCardTypes() []uint32 {
	if m != nil {
		return m.SpCardTypes
	}
	return nil
}

func (m *MsgThirteenGameEnd) GetSpWinScore() []int32 {
	if m != nil {
		return m.SpWinScore
	}
	return nil
}

func (m *MsgThirteenGameEnd) GetHandleCardType() []*MsgShuzu {
	if m != nil {
		return m.HandleCardType
	}
	return nil
}

func (m *MsgThirteenGameEnd) GetHandleWinScore() []*MsgShuzu {
	if m != nil {
		return m.HandleWinScore
	}
	return nil
}

func (m *MsgThirteenGameEnd) GetExtraWinScore() []*MsgShuzu {
	if m != nil {
		return m.ExtraWinScore
	}
	return nil
}

func (m *MsgThirteenGameEnd) GetShootList() []*MsgShuzu {
	if m != nil {
		return m.ShootList
	}
	return nil
}

func (m *MsgThirteenGameEnd) GetShootWinScore() []*MsgShuzu {
	if m != nil {
		return m.ShootWinScore
	}
	return nil
}

func (m *MsgThirteenGameEnd) GetPlayerScore() []int64 {
	if m != nil {
		return m.PlayerScore
	}
	return nil
}

func (m *MsgThirteenGameEnd) GetPlayerWinScore() []int64 {
	if m != nil {
		return m.PlayerWinScore
	}
	return nil
}

func (m *MsgThirteenGameEnd) GetIsConnected() uint32 {
	if m != nil && m.IsConnected != nil {
		return *m.IsConnected
	}
	return 0
}

func (m *MsgThirteenGameEnd) GetPlayerStatus() []uint32 {
	if m != nil {
		return m.PlayerStatus
	}
	return nil
}

func (m *MsgThirteenGameEnd) GetCurRound() uint32 {
	if m != nil && m.CurRound != nil {
		return *m.CurRound
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgThirteenGameInfoFreeRep)(nil), "net.msg_thirteen_game_info_free_rep")
	proto.RegisterType((*MsgThirteenGameInfoPlayRep)(nil), "net.msg_thirteen_game_info_play_rep")
	proto.RegisterType((*MsgThirteenStartRep)(nil), "net.msg_thirteen_start_rep")
	proto.RegisterType((*MsgThirteenSendCardRep)(nil), "net.msg_thirteen_send_card_rep")
	proto.RegisterType((*MsgThirteenChangeCard)(nil), "net.msg_thirteen_change_card")
	proto.RegisterType((*MsgThirteenChangeCardRep)(nil), "net.msg_thirteen_change_card_rep")
	proto.RegisterType((*MsgThirteenGameEnd)(nil), "net.msg_thirteen_game_end")
}

func init() { proto.RegisterFile("thirteen_logic_msg.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x52, 0xc1, 0x8e, 0xda, 0x30,
	0x10, 0x15, 0x9b, 0x02, 0xdd, 0x81, 0x00, 0x75, 0xa1, 0x8a, 0x50, 0xa5, 0xa2, 0xf4, 0x50, 0xa4,
	0x4a, 0x1c, 0x7a, 0xec, 0xad, 0xdf, 0xd1, 0x83, 0x65, 0x9c, 0x59, 0x62, 0x35, 0xd8, 0x91, 0x3d,
	0xe9, 0x76, 0xfb, 0x63, 0xfd, 0x81, 0x7e, 0xd8, 0x2a, 0x76, 0x42, 0x36, 0x6c, 0xb8, 0xbe, 0x79,
	0xef, 0xcd, 0xcc, 0x9b, 0x81, 0x84, 0x72, 0x65, 0x09, 0x51, 0xf3, 0xc2, 0x9c, 0x94, 0xe4, 0x67,
	0x77, 0x3a, 0x94, 0xd6, 0x90, 0x61, 0x91, 0x46, 0xda, 0x6e, 0x8e, 0xc2, 0x61, 0x0d, 0x72, 0x47,
	0xb6, 0x92, 0x14, 0x6a, 0xdb, 0x15, 0x5a, 0x6b, 0x2c, 0x97, 0x26, 0xc3, 0x80, 0xa4, 0x3f, 0xe1,
	0x53, 0xcd, 0xba, 0xb8, 0x9d, 0xc4, 0x19, 0xb9, 0xd2, 0x0f, 0x86, 0x3f, 0x58, 0x44, 0x6e, 0xb1,
	0x64, 0x0c, 0x80, 0xd4, 0x19, 0x79, 0x81, 0xe2, 0x37, 0x26, 0xa3, 0xdd, 0x68, 0x1f, 0xb3, 0x77,
	0x70, 0x7f, 0x14, 0xfa, 0x17, 0x5a, 0xae, 0xb2, 0xe4, 0xae, 0x85, 0x64, 0x65, 0xb9, 0x35, 0x95,
	0xce, 0x92, 0xa8, 0x86, 0xd2, 0xff, 0xa3, 0x9b, 0xee, 0x65, 0x21, 0x9e, 0xbc, 0xfb, 0x67, 0x98,
	0x91, 0x38, 0x16, 0xc8, 0xa5, 0xb0, 0x99, 0x4b, 0x46, 0xbb, 0x68, 0x3f, 0xfb, 0xb6, 0x38, 0x68,
	0xa4, 0x43, 0x2d, 0xf5, 0x28, 0x7b, 0x0f, 0x33, 0x2f, 0x75, 0x24, 0xa8, 0x72, 0x4d, 0x43, 0x06,
	0xe0, 0x72, 0xf3, 0xd8, 0x08, 0xa3, 0x5d, 0xb4, 0x8f, 0xd9, 0x06, 0xe2, 0xda, 0x19, 0x6d, 0x4b,
	0x7d, 0xe3, 0xe1, 0xfe, 0x0a, 0x63, 0x2f, 0xdf, 0x40, 0xec, 0x4a, 0x94, 0x4a, 0x14, 0x8d, 0xc3,
	0xc4, 0x53, 0x7b, 0x6b, 0x4c, 0xfd, 0x1a, 0x5f, 0xe1, 0x43, 0x6f, 0x0b, 0x47, 0xc2, 0x92, 0x1f,
	0xbe, 0x47, 0xf6, 0xc9, 0xa4, 0x3f, 0x60, 0xdb, 0x27, 0xa3, 0xce, 0x7c, 0x03, 0x2f, 0x88, 0x61,
	0xdc, 0xed, 0x19, 0xb3, 0x35, 0xcc, 0x5d, 0x19, 0xaa, 0xf4, 0x54, 0x62, 0x58, 0x2c, 0xfd, 0x0e,
	0x49, 0xcf, 0x42, 0xe6, 0x42, 0x9f, 0x42, 0x40, 0xd7, 0x06, 0x4b, 0x98, 0x2a, 0xc7, 0xeb, 0x18,
	0x1a, 0xad, 0x80, 0x8f, 0xb7, 0xb4, 0x7e, 0x80, 0x25, 0x4c, 0x4d, 0x19, 0xce, 0x16, 0x2e, 0xb9,
	0x80, 0x89, 0x45, 0x57, 0x15, 0xd4, 0xa4, 0x7a, 0x69, 0x10, 0x5d, 0xe2, 0xb8, 0x8c, 0xe7, 0xc3,
	0x4c, 0xff, 0x45, 0xb0, 0x79, 0x7d, 0x55, 0xd4, 0xd9, 0xe0, 0xa7, 0x5c, 0xdd, 0xf7, 0x6e, 0xf0,
	0xbe, 0xfe, 0x16, 0x5d, 0x0e, 0x6d, 0xf3, 0x10, 0xcf, 0xa3, 0xd2, 0xdc, 0x49, 0x63, 0x43, 0xff,
	0x31, 0xdb, 0xc3, 0x2a, 0x17, 0x3a, 0x6b, 0x2c, 0xc3, 0x64, 0xe3, 0x2b, 0x5b, 0x97, 0x57, 0x7f,
	0xab, 0x17, 0xcc, 0xce, 0x63, 0x32, 0xc8, 0xfc, 0x02, 0x4b, 0xfc, 0x43, 0x56, 0xbc, 0x20, 0x4e,
	0x07, 0x89, 0xa9, 0x7f, 0x3a, 0x43, 0xbc, 0x50, 0x8e, 0x92, 0xb7, 0xb7, 0xcc, 0x02, 0xa7, 0x33,
	0xbb, 0x1f, 0x24, 0xae, 0x61, 0xde, 0x7e, 0xab, 0x67, 0xc1, 0x2e, 0xda, 0x47, 0x2c, 0x81, 0x55,
	0x83, 0x76, 0xfa, 0x99, 0xaf, 0xac, 0x61, 0xae, 0x1c, 0x97, 0x46, 0x6b, 0x94, 0x84, 0x59, 0x32,
	0x6f, 0x1f, 0xb9, 0xff, 0xf3, 0xf1, 0xeb, 0x47, 0x5e, 0xd4, 0xcc, 0xe7, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x7d, 0x71, 0x7d, 0xbb, 0x35, 0x04, 0x00, 0x00,
}
