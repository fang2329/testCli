// Code generated by protoc-gen-go. DO NOT EDIT.
// source: poker240_logic_msg.proto

/*
Package net is a generated protocol buffer package.

It is generated from these files:
	poker240_logic_msg.proto
	msg_define.proto
	baccarat_logic_msg.proto
	bigtwo_logic_msg.proto
	paijiu_logic_msg.proto
	thirteen_logic_msg.proto
	zajinhua_logic_msg.proto
	land_logic_msg.proto
	bainiu_logic_msg.proto
	showhand_logic_msg.proto
	texas_logic_msg.proto
	base_msg_struct.proto
	sangong_logic_msg.proto
	niuniu_logic_msg.proto
	client_logic_msg.proto
	servers_msg.proto
	error_code.proto

It has these top-level messages:
	MsgPoker240GameInfoResp
	MsgPoker240StartResp
	MsgPoker240CallZhuReq
	MsgPoker240CallZhuResp
	MsgPoker240BankerOutCard
	MsgPoker240OutCardReq
	MsgPoker240OutCardResp
	MsgPoker240GameOverNotify
	MsgPoker240ReminderResp
	MsgBaccaratGameInfoFreeRep
	MsgBaccaratGameInfoPlayRep
	MsgBaccaratStartRep
	MsgBaccaratPlaceJettonReq
	MsgBaccaratPlaceJettonRep
	MsgBaccaratPlaceJettonBroadcast
	MsgBaccaratGameEnd
	MsgBaccaratApplyBanker
	MsgBaccaratApplyBankerRep
	MsgBaccaratChangeBanker
	MsgBaccaratChangeUserScore
	MsgBaccaratApplyList
	MsgBaccaratJumpApplyQueueReq
	MsgBaccaratJumpApplyQueueRep
	MsgBaccaratBankerCalcRep
	MsgBaccaratAddBankerscoreRep
	BaccaratPlayLog
	MsgBaccaratPlayLogRep
	MsgBigtwoGameInfoResp
	MsgBigtwoStartResp
	MsgBigtwoOutCardReq
	MsgBigtwoOutCardResp
	MsgBigtwoPassCardReq
	MsgBigtwoPassCardResp
	MsgBigtwoHandCardReq
	MsgBigtwoHandCardResp
	MsgBigtwoGameOverNotify
	MsgPaijiuGameInfoFreeRep
	MsgPaijiuGameInfoPlayRep
	MsgPaijiuStartRep
	MsgPaijiuPlaceJettonReq
	MsgPaijiuPlaceJettonRep
	MsgPaijiuPlaceJettonBroadcast
	MsgPaijiuGameEnd
	MsgPaijiuApplyBanker
	MsgPaijiuApplyBankerRep
	MsgPaijiuChangeBanker
	MsgPaijiuChangeUserScore
	MsgPaijiuApplyList
	MsgPaijiuJumpApplyQueueReq
	MsgPaijiuJumpApplyQueueRep
	MsgPaijiuBankerCalcRep
	MsgPaijiuAddBankerscoreRep
	MsgThirteenGameInfoFreeRep
	MsgThirteenGameInfoPlayRep
	MsgThirteenStartRep
	MsgThirteenSendCardRep
	MsgThirteenChangeCard
	MsgThirteenChangeCardRep
	MsgThirteenGameEnd
	MsgZajinhuaGameInfoFreeRep
	MsgZajinhuaGameInfoPlayRep
	MsgZajinhuaStartRep
	MsgZajinhuaAddscoreReq
	MsgZajinhuaAddscoreRep
	MsgZajinhuaGiveupReq
	MsgZajinhuaGiveupRep
	MsgZajinhuaCompareCardReq
	MsgZajinhuaCompareCardRep
	MsgZajinhuaLookCardReq
	MsgZajinhuaLookCardRep
	MsgZajinhuaOpenCardReq
	MsgZajinhuaOpenCard
	MsgZajinhuaGameEndRep
	MsgZajinhuaShowCardReq
	MsgZajinhuaShowCardRep
	MsgLandGameInfoRep
	MsgLandStartRep
	MsgLandCallScoreReq
	MsgLandCallScoreRep
	MsgLandReqHandCardReq
	MsgLandHandCardRep
	MsgLandBankerInfoRep
	MsgLandOutCardReq
	MsgLandOutCardRep
	MsgLandPassCardReq
	MsgLandPassCardRep
	MsgLandGameOverRep
	MsgLandTaskFinish
	MsgBainiuGameInfoFreeRep
	MsgBainiuGameInfoPlayRep
	MsgBainiuStartRep
	MsgBainiuPlaceJettonReq
	MsgBainiuPlaceJettonRep
	MsgBainiuPlaceJettonBroadcast
	MsgBainiuGameEnd
	MsgBainiuApplyBanker
	MsgBainiuApplyBankerRep
	MsgBainiuChangeBanker
	MsgBainiuChangeUserScore
	MsgBainiuApplyList
	MsgBainiuJumpApplyQueueReq
	MsgBainiuJumpApplyQueueRep
	MsgBainiuBankerCalcRep
	MsgBainiuAddBankerscoreRep
	BainiuPlayLog
	MsgBainiuPlayLogRep
	MsgShowhandGameInfoRep
	MsgShowhandStartRep
	MsgShowhandGiveupReq
	MsgShowhandGiveupRep
	MsgShowhandAddscoreReq
	MsgShowhandAddscoreRep
	MsgShowhandSendcardRep
	MsgShowhandGameOverRep
	MsgTexasGameInfoFreeRep
	MsgTexasGameInfoPlayRep
	MsgTexasStartRep
	MsgTexasAddscoreReq
	MsgTexasAddscoreRep
	MsgTexasGiveupReq
	MsgTexasGiveupRep
	MsgTexasSendcardRep
	TexasWinChair
	MsgTexasGameEndRep
	MsgTexasBuyinReq
	MsgTexasBuyinRep
	MsgTexasShowCardReq
	MsgTexasShowCardRep
	BaseInfo
	LandInfo
	GameDataInfo
	SvrInfo
	RoomInfo
	SeatInfo
	SeatValueInfo
	SeatFace
	LookerInfo
	LandTableInfo
	ShowhandTableInfo
	BainiuTableInfo
	TexasTableInfo
	ZajinhuaTableInfo
	NiuniuTableInfo
	BaccaratTableInfo
	SangongTableInfo
	PaijiuTableInfo
	BigtwoTableInfo
	ThirteenTableInfo
	TableFaceInfo
	MissionData
	Item
	ItemBag
	MsgCards
	MsgShuzu
	PrivateKvParam
	PlayerGameInfo
	PrivateGameInfo
	PrivateTableInfo
	MsgSangongGameInfoFreeRep
	MsgSangongGameInfoPlayRep
	MsgSangongStartRep
	MsgSangongApplyBanker
	MsgSangongApplyBankerRep
	MsgSangongBankerResultRep
	MsgSangongQuitBankerResp
	MsgSangongQuitBankerBroadcast
	MsgSangongPlaceJettonReq
	MsgSangongPlaceJettonRep
	MsgSangongPlaceJettonBroadcast
	MsgSangongSendCardRep
	MsgSangongChangeCard
	MsgSangongChangeCardRep
	MsgSangongGameEnd
	MsgNiuniuGameInfoFreeRep
	MsgNiuniuGameInfoPlayRep
	MsgNiuniuStartRep
	MsgNiuniuApplyBanker
	MsgNiuniuApplyBankerRep
	MsgNiuniuBankerResultRep
	MsgNiuniuPlaceJettonReq
	MsgNiuniuPlaceJettonRep
	MsgNiuniuPlaceJettonBroadcast
	MsgNiuniuSendCardRep
	MsgNiuniuChangeCard
	MsgNiuniuChangeCardRep
	MsgNiuniuGameEnd
	MsgHeartTest
	MsgLoginReq
	MsgLoginRep
	MsgNotifyLeaveRep
	MsgEnterGameRep
	MsgPlayerDataRep
	MsgUpdateAccValue
	MsgUpdateBaseValue
	MsgUpdateLandInfo
	MsgUpdateGameInfo
	MsgSvrsInfoReq
	MsgSvrsInfoRep
	MsgEnterGamesvrReq
	MsgEnterGamesvrRep
	MsgLoginSafeboxReq
	MsgLoginSafeboxRep
	MsgChangeSafeboxPwdReq
	MsgChangeSafeboxPwdRep
	MsgTakeSafeboxReq
	MsgTakeSafeboxRep
	MsgGiveSafeboxReq
	MsgGiveSafeboxRep
	MsgPhpBroadcastRep
	MsgSystemBroadcastRep
	MsgSendAllMissionRep
	MsgSendMissionRep
	MsgGetMissionPrizeReq
	MsgGetMissionPrizeRep
	MsgGetLoginRewardReq
	MsgGetLoginRewardRep
	MsgGetBankruptHelpReq
	MsgGetBankruptHelpRep
	MsgExchangeScoreReq
	MsgExchangeScoreRep
	MsgSpeakBroadcastReq
	MsgSpeakBroadcastRep
	MsgGetHistorySpeak
	MsgSendHistorySpeak
	MsgSpeakOperRep
	MsgGetServerInfo
	ServerInfo
	MsgSendServerInfo
	MsgPrivateGameInfoReq
	MsgPrivateGameInfoRep
	MsgPrivateGameResult
	MsgSelfPrivateListReq
	MsgSelfPrivateListRep
	MsgRoomsInfoReq
	MsgRoomsInfoRep
	MsgBackLobbyReq
	MsgBackLobbyRep
	MsgGotoGamesvrReq
	MsgGotoGamesvrRep
	MsgEnterRoomReq
	MsgEnterRoomRep
	MsgNotifyLeaveRoomRep
	MsgTableListReq
	MsgTableListRep
	MsgCreateTableReq
	MsgCreateTableRep
	MsgRenewTableReq
	MsgRenewTableRep
	MsgLeaveTableReq
	MsgLeaveTableRep
	MsgEnterTableReq
	MsgEnterTableRep
	MsgTableInfoRep
	MsgSeatInfoRep
	MsgTableReadyReq
	MsgTableReadyRep
	MsgTableChatReq
	MsgTableChatRep
	MsgTableSetAutoReq
	MsgTableSetAutoRep
	MsgFastJoinRoomReq
	MsgFastJoinRoomRep
	MsgFastJoinTableReq
	MsgFastJoinTableRep
	MsgQueryTableListReq
	MsgQueryTableListRep
	MsgNotifyPlayerJoinRep
	MsgLookerListInfoRep
	MsgSitdownStandupReq
	MsgSitdownStandupRep
	MsgPrivateGameoverReq
	MsgPrivateGameoverResp
	MsgPrivatePlayInfoReq
	MsgPrivatePlayInfoResp
	MsgSeatValueInfoRep
	MsgEnterPrivateTableReq
	MsgEnterPrivateTableResp
	MsgVoteInfoReq
	MsgRegisterSvr
	MsgRegisterSvrRep
	MsgReportSvrInfo
	MsgLeaveSvr
	MsgNotifyNetState
	MsgEnterIntoGameSvr
	InnerMsgCreateTable
	MsgNotifyChangeAccountData
	MsgNotifyChangePlayerinfo
	MsgNotifyStopService
	LandGameResult
	MsgReportGameResult
	MsgReportFeeLog
	MsgLeaveRobot
	MsgFlushChangeAccountData
*/
package net

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 游戏信息
type MsgPoker240GameInfoResp struct {
	CurUser          *uint32     `protobuf:"varint,1,opt,name=cur_user" json:"cur_user,omitempty"`
	TurnWiner        *uint32     `protobuf:"varint,2,opt,name=turn_winer" json:"turn_winer,omitempty"`
	BankerUser       *uint32     `protobuf:"varint,3,opt,name=banker_user" json:"banker_user,omitempty"`
	ZhuType          *uint32     `protobuf:"varint,4,opt,name=zhu_type" json:"zhu_type,omitempty"`
	TurnCardData     []*MsgCards `protobuf:"bytes,5,rep,name=turn_card_data" json:"turn_card_data,omitempty"`
	ScoreCardData    []*MsgCards `protobuf:"bytes,6,rep,name=score_card_data" json:"score_card_data,omitempty"`
	HandCardData     []uint32    `protobuf:"varint,7,rep,name=hand_card_data" json:"hand_card_data,omitempty"`
	GameState        *uint32     `protobuf:"varint,8,opt,name=game_state" json:"game_state,omitempty"`
	WaitTime         *uint32     `protobuf:"varint,9,opt,name=wait_time" json:"wait_time,omitempty"`
	ZhuCard          *uint32     `protobuf:"varint,10,opt,name=zhu_card" json:"zhu_card,omitempty"`
	CurPrivateRound  *uint32     `protobuf:"varint,11,opt,name=cur_private_round" json:"cur_private_round,omitempty"`
	PrevOutCard      []*MsgCards `protobuf:"bytes,12,rep,name=prev_out_card" json:"prev_out_card,omitempty"`
	CallZhuState     *uint32     `protobuf:"varint,13,opt,name=call_zhu_state" json:"call_zhu_state,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *MsgPoker240GameInfoResp) Reset()                    { *m = MsgPoker240GameInfoResp{} }
func (m *MsgPoker240GameInfoResp) String() string            { return proto.CompactTextString(m) }
func (*MsgPoker240GameInfoResp) ProtoMessage()               {}
func (*MsgPoker240GameInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MsgPoker240GameInfoResp) GetCurUser() uint32 {
	if m != nil && m.CurUser != nil {
		return *m.CurUser
	}
	return 0
}

func (m *MsgPoker240GameInfoResp) GetTurnWiner() uint32 {
	if m != nil && m.TurnWiner != nil {
		return *m.TurnWiner
	}
	return 0
}

func (m *MsgPoker240GameInfoResp) GetBankerUser() uint32 {
	if m != nil && m.BankerUser != nil {
		return *m.BankerUser
	}
	return 0
}

func (m *MsgPoker240GameInfoResp) GetZhuType() uint32 {
	if m != nil && m.ZhuType != nil {
		return *m.ZhuType
	}
	return 0
}

func (m *MsgPoker240GameInfoResp) GetTurnCardData() []*MsgCards {
	if m != nil {
		return m.TurnCardData
	}
	return nil
}

func (m *MsgPoker240GameInfoResp) GetScoreCardData() []*MsgCards {
	if m != nil {
		return m.ScoreCardData
	}
	return nil
}

func (m *MsgPoker240GameInfoResp) GetHandCardData() []uint32 {
	if m != nil {
		return m.HandCardData
	}
	return nil
}

func (m *MsgPoker240GameInfoResp) GetGameState() uint32 {
	if m != nil && m.GameState != nil {
		return *m.GameState
	}
	return 0
}

func (m *MsgPoker240GameInfoResp) GetWaitTime() uint32 {
	if m != nil && m.WaitTime != nil {
		return *m.WaitTime
	}
	return 0
}

func (m *MsgPoker240GameInfoResp) GetZhuCard() uint32 {
	if m != nil && m.ZhuCard != nil {
		return *m.ZhuCard
	}
	return 0
}

func (m *MsgPoker240GameInfoResp) GetCurPrivateRound() uint32 {
	if m != nil && m.CurPrivateRound != nil {
		return *m.CurPrivateRound
	}
	return 0
}

func (m *MsgPoker240GameInfoResp) GetPrevOutCard() []*MsgCards {
	if m != nil {
		return m.PrevOutCard
	}
	return nil
}

func (m *MsgPoker240GameInfoResp) GetCallZhuState() uint32 {
	if m != nil && m.CallZhuState != nil {
		return *m.CallZhuState
	}
	return 0
}

// 游戏开始
type MsgPoker240StartResp struct {
	StartUser        *uint32  `protobuf:"varint,1,opt,name=start_user" json:"start_user,omitempty"`
	HandCardData     []uint32 `protobuf:"varint,2,rep,name=hand_card_data" json:"hand_card_data,omitempty"`
	CurPrivateRound  *uint32  `protobuf:"varint,3,opt,name=cur_private_round" json:"cur_private_round,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *MsgPoker240StartResp) Reset()                    { *m = MsgPoker240StartResp{} }
func (m *MsgPoker240StartResp) String() string            { return proto.CompactTextString(m) }
func (*MsgPoker240StartResp) ProtoMessage()               {}
func (*MsgPoker240StartResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MsgPoker240StartResp) GetStartUser() uint32 {
	if m != nil && m.StartUser != nil {
		return *m.StartUser
	}
	return 0
}

func (m *MsgPoker240StartResp) GetHandCardData() []uint32 {
	if m != nil {
		return m.HandCardData
	}
	return nil
}

func (m *MsgPoker240StartResp) GetCurPrivateRound() uint32 {
	if m != nil && m.CurPrivateRound != nil {
		return *m.CurPrivateRound
	}
	return 0
}

// 叫主或者反主
type MsgPoker240CallZhuReq struct {
	ZhuCard          *uint32 `protobuf:"varint,1,opt,name=zhu_card" json:"zhu_card,omitempty"`
	CallType         *uint32 `protobuf:"varint,2,opt,name=call_type" json:"call_type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MsgPoker240CallZhuReq) Reset()                    { *m = MsgPoker240CallZhuReq{} }
func (m *MsgPoker240CallZhuReq) String() string            { return proto.CompactTextString(m) }
func (*MsgPoker240CallZhuReq) ProtoMessage()               {}
func (*MsgPoker240CallZhuReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MsgPoker240CallZhuReq) GetZhuCard() uint32 {
	if m != nil && m.ZhuCard != nil {
		return *m.ZhuCard
	}
	return 0
}

func (m *MsgPoker240CallZhuReq) GetCallType() uint32 {
	if m != nil && m.CallType != nil {
		return *m.CallType
	}
	return 0
}

type MsgPoker240CallZhuResp struct {
	RetCode          *uint32 `protobuf:"varint,1,opt,name=ret_code" json:"ret_code,omitempty"`
	ZhuCard          *uint32 `protobuf:"varint,2,opt,name=zhu_card" json:"zhu_card,omitempty"`
	CallType         *uint32 `protobuf:"varint,3,opt,name=call_type" json:"call_type,omitempty"`
	CallUser         *uint32 `protobuf:"varint,4,opt,name=call_user" json:"call_user,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MsgPoker240CallZhuResp) Reset()                    { *m = MsgPoker240CallZhuResp{} }
func (m *MsgPoker240CallZhuResp) String() string            { return proto.CompactTextString(m) }
func (*MsgPoker240CallZhuResp) ProtoMessage()               {}
func (*MsgPoker240CallZhuResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MsgPoker240CallZhuResp) GetRetCode() uint32 {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return 0
}

func (m *MsgPoker240CallZhuResp) GetZhuCard() uint32 {
	if m != nil && m.ZhuCard != nil {
		return *m.ZhuCard
	}
	return 0
}

func (m *MsgPoker240CallZhuResp) GetCallType() uint32 {
	if m != nil && m.CallType != nil {
		return *m.CallType
	}
	return 0
}

func (m *MsgPoker240CallZhuResp) GetCallUser() uint32 {
	if m != nil && m.CallUser != nil {
		return *m.CallUser
	}
	return 0
}

// 广播庄家开始出牌
type MsgPoker240BankerOutCard struct {
	BankerUser       *uint32 `protobuf:"varint,1,opt,name=banker_user" json:"banker_user,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MsgPoker240BankerOutCard) Reset()                    { *m = MsgPoker240BankerOutCard{} }
func (m *MsgPoker240BankerOutCard) String() string            { return proto.CompactTextString(m) }
func (*MsgPoker240BankerOutCard) ProtoMessage()               {}
func (*MsgPoker240BankerOutCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MsgPoker240BankerOutCard) GetBankerUser() uint32 {
	if m != nil && m.BankerUser != nil {
		return *m.BankerUser
	}
	return 0
}

// 玩家出牌
type MsgPoker240OutCardReq struct {
	CardData         []uint32 `protobuf:"varint,1,rep,name=card_data" json:"card_data,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *MsgPoker240OutCardReq) Reset()                    { *m = MsgPoker240OutCardReq{} }
func (m *MsgPoker240OutCardReq) String() string            { return proto.CompactTextString(m) }
func (*MsgPoker240OutCardReq) ProtoMessage()               {}
func (*MsgPoker240OutCardReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MsgPoker240OutCardReq) GetCardData() []uint32 {
	if m != nil {
		return m.CardData
	}
	return nil
}

// 玩家出牌返回
type MsgPoker240OutCardResp struct {
	RetCode          *uint32     `protobuf:"varint,1,opt,name=ret_code" json:"ret_code,omitempty"`
	CurUser          *uint32     `protobuf:"varint,2,opt,name=cur_user" json:"cur_user,omitempty"`
	OutCardUser      *uint32     `protobuf:"varint,3,opt,name=out_card_user" json:"out_card_user,omitempty"`
	CardData         []uint32    `protobuf:"varint,4,rep,name=card_data" json:"card_data,omitempty"`
	IsTurnOver       *uint32     `protobuf:"varint,5,opt,name=is_turn_over" json:"is_turn_over,omitempty"`
	TurnWiner        *uint32     `protobuf:"varint,6,opt,name=turn_winer" json:"turn_winer,omitempty"`
	ScoreCardData    []*MsgCards `protobuf:"bytes,7,rep,name=score_card_data" json:"score_card_data,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *MsgPoker240OutCardResp) Reset()                    { *m = MsgPoker240OutCardResp{} }
func (m *MsgPoker240OutCardResp) String() string            { return proto.CompactTextString(m) }
func (*MsgPoker240OutCardResp) ProtoMessage()               {}
func (*MsgPoker240OutCardResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MsgPoker240OutCardResp) GetRetCode() uint32 {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return 0
}

func (m *MsgPoker240OutCardResp) GetCurUser() uint32 {
	if m != nil && m.CurUser != nil {
		return *m.CurUser
	}
	return 0
}

func (m *MsgPoker240OutCardResp) GetOutCardUser() uint32 {
	if m != nil && m.OutCardUser != nil {
		return *m.OutCardUser
	}
	return 0
}

func (m *MsgPoker240OutCardResp) GetCardData() []uint32 {
	if m != nil {
		return m.CardData
	}
	return nil
}

func (m *MsgPoker240OutCardResp) GetIsTurnOver() uint32 {
	if m != nil && m.IsTurnOver != nil {
		return *m.IsTurnOver
	}
	return 0
}

func (m *MsgPoker240OutCardResp) GetTurnWiner() uint32 {
	if m != nil && m.TurnWiner != nil {
		return *m.TurnWiner
	}
	return 0
}

func (m *MsgPoker240OutCardResp) GetScoreCardData() []*MsgCards {
	if m != nil {
		return m.ScoreCardData
	}
	return nil
}

// 游戏结束
type MsgPoker240GameOverNotify struct {
	Winscores        []int64     `protobuf:"varint,1,rep,name=winscores" json:"winscores,omitempty"`
	ScoreCardData    []*MsgCards `protobuf:"bytes,2,rep,name=score_card_data" json:"score_card_data,omitempty"`
	CurPrivateRound  *uint32     `protobuf:"varint,3,opt,name=cur_private_round" json:"cur_private_round,omitempty"`
	FinalCardData    []*MsgCards `protobuf:"bytes,4,rep,name=final_card_data" json:"final_card_data,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *MsgPoker240GameOverNotify) Reset()                    { *m = MsgPoker240GameOverNotify{} }
func (m *MsgPoker240GameOverNotify) String() string            { return proto.CompactTextString(m) }
func (*MsgPoker240GameOverNotify) ProtoMessage()               {}
func (*MsgPoker240GameOverNotify) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MsgPoker240GameOverNotify) GetWinscores() []int64 {
	if m != nil {
		return m.Winscores
	}
	return nil
}

func (m *MsgPoker240GameOverNotify) GetScoreCardData() []*MsgCards {
	if m != nil {
		return m.ScoreCardData
	}
	return nil
}

func (m *MsgPoker240GameOverNotify) GetCurPrivateRound() uint32 {
	if m != nil && m.CurPrivateRound != nil {
		return *m.CurPrivateRound
	}
	return 0
}

func (m *MsgPoker240GameOverNotify) GetFinalCardData() []*MsgCards {
	if m != nil {
		return m.FinalCardData
	}
	return nil
}

// 提示牌消息
type MsgPoker240ReminderResp struct {
	HandCardData     []uint32 `protobuf:"varint,1,rep,name=hand_card_data" json:"hand_card_data,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *MsgPoker240ReminderResp) Reset()                    { *m = MsgPoker240ReminderResp{} }
func (m *MsgPoker240ReminderResp) String() string            { return proto.CompactTextString(m) }
func (*MsgPoker240ReminderResp) ProtoMessage()               {}
func (*MsgPoker240ReminderResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MsgPoker240ReminderResp) GetHandCardData() []uint32 {
	if m != nil {
		return m.HandCardData
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgPoker240GameInfoResp)(nil), "net.msg_poker240_game_info_resp")
	proto.RegisterType((*MsgPoker240StartResp)(nil), "net.msg_poker240_start_resp")
	proto.RegisterType((*MsgPoker240CallZhuReq)(nil), "net.msg_poker240_call_zhu_req")
	proto.RegisterType((*MsgPoker240CallZhuResp)(nil), "net.msg_poker240_call_zhu_resp")
	proto.RegisterType((*MsgPoker240BankerOutCard)(nil), "net.msg_poker240_banker_out_card")
	proto.RegisterType((*MsgPoker240OutCardReq)(nil), "net.msg_poker240_out_card_req")
	proto.RegisterType((*MsgPoker240OutCardResp)(nil), "net.msg_poker240_out_card_resp")
	proto.RegisterType((*MsgPoker240GameOverNotify)(nil), "net.msg_poker240_game_over_notify")
	proto.RegisterType((*MsgPoker240ReminderResp)(nil), "net.msg_poker240_reminder_resp")
}

func init() { proto.RegisterFile("poker240_logic_msg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0x6d, 0x6e, 0xd3, 0x40,
	0x10, 0x95, 0xe3, 0x7e, 0xa4, 0x93, 0x26, 0xa4, 0x86, 0xc2, 0x36, 0x80, 0x14, 0x59, 0x02, 0xfa,
	0x2b, 0x42, 0xa5, 0x07, 0xe0, 0x26, 0xcb, 0xd6, 0x9e, 0xa4, 0xab, 0x26, 0xbb, 0x66, 0x76, 0x9d,
	0xaa, 0x5c, 0x86, 0x93, 0x70, 0x1d, 0xce, 0x51, 0xed, 0x6c, 0x12, 0xd9, 0x89, 0xf3, 0xd3, 0x6f,
	0x67, 0xde, 0xcc, 0x7b, 0xf3, 0x0c, 0xa2, 0xb2, 0x4f, 0x48, 0x77, 0xf7, 0xdf, 0xe5, 0xd2, 0x2e,
	0x74, 0x21, 0x57, 0x6e, 0x31, 0xab, 0xc8, 0x7a, 0x9b, 0xa5, 0x06, 0xfd, 0xe4, 0xfa, 0x41, 0x39,
	0x0c, 0xa0, 0x74, 0x9e, 0xea, 0xc2, 0xc7, 0xb7, 0xc9, 0x18, 0x89, 0x2c, 0xc9, 0xc2, 0x96, 0x18,
	0x91, 0xfc, 0x7f, 0x0f, 0x3e, 0x86, 0xb2, 0x1d, 0xdd, 0x42, 0xad, 0x50, 0x6a, 0x33, 0xb7, 0x92,
	0xd0, 0x55, 0xd9, 0x18, 0xfa, 0x45, 0x4d, 0xb2, 0x76, 0x48, 0x22, 0x99, 0x26, 0xb7, 0xc3, 0x2c,
	0x03, 0xf0, 0x35, 0x19, 0xf9, 0xac, 0x0d, 0x92, 0xe8, 0x31, 0xf6, 0x16, 0x06, 0x0f, 0xca, 0x3c,
	0xe1, 0xa6, 0x30, 0x65, 0x70, 0x0c, 0xfd, 0x3f, 0x8f, 0xb5, 0xf4, 0x2f, 0x15, 0x8a, 0x13, 0x46,
	0xbe, 0xc2, 0x88, 0x5b, 0x0b, 0x45, 0xa5, 0x2c, 0x95, 0x57, 0xe2, 0x74, 0x9a, 0xde, 0x0e, 0xee,
	0x46, 0x33, 0x83, 0x7e, 0x16, 0xd6, 0x08, 0x2f, 0x2e, 0xfb, 0x06, 0x6f, 0x5c, 0x61, 0x09, 0x1b,
	0x85, 0x67, 0x9d, 0x85, 0xef, 0x61, 0xf4, 0xa8, 0x4c, 0xd9, 0xa8, 0x3b, 0x9f, 0xa6, 0x71, 0x47,
	0xd6, 0xe1, 0xbc, 0xf2, 0x28, 0xfa, 0x3c, 0xfc, 0x0a, 0x2e, 0x9e, 0x95, 0xf6, 0xd2, 0xeb, 0x15,
	0x8a, 0x8b, 0xe6, 0x86, 0xa1, 0x5b, 0x00, 0x23, 0x37, 0x70, 0x15, 0xe4, 0x56, 0xa4, 0xd7, 0xca,
	0xa3, 0x24, 0x5b, 0x9b, 0x52, 0x0c, 0xf8, 0xe9, 0x0b, 0x0c, 0x2b, 0xc2, 0xb5, 0xb4, 0xb5, 0x8f,
	0x1d, 0x97, 0xc7, 0x56, 0x2a, 0xd4, 0x72, 0x29, 0x03, 0x71, 0x1c, 0x3f, 0x0c, 0xed, 0xf9, 0x2f,
	0xf8, 0xd0, 0xf2, 0xd9, 0x79, 0x45, 0x3e, 0x7a, 0x9c, 0x01, 0xc4, 0xaf, 0x86, 0xcb, 0x87, 0xca,
	0x7a, 0xac, 0xac, 0x73, 0x41, 0xf6, 0x3b, 0xff, 0x09, 0x37, 0xad, 0x09, 0xbb, 0x35, 0x08, 0x7f,
	0xb7, 0xa4, 0x26, 0x5b, 0x3f, 0xb8, 0x82, 0xef, 0xc3, 0x67, 0xcc, 0xe7, 0x30, 0x39, 0xc6, 0x10,
	0xa3, 0x40, 0xe8, 0x39, 0x3c, 0x1b, 0x8a, 0x26, 0x69, 0xef, 0x90, 0x34, 0x6d, 0x41, 0x2c, 0x8e,
	0x73, 0x90, 0xff, 0x80, 0x4f, 0xad, 0x39, 0x9b, 0xec, 0x6c, 0x9d, 0xdd, 0x8f, 0x13, 0x0f, 0xcb,
	0x67, 0x7b, 0xf2, 0xb6, 0xd5, 0x2c, 0x8f, 0x87, 0x6c, 0x9d, 0x4a, 0x82, 0x53, 0xf9, 0xbf, 0x64,
	0x4f, 0x4d, 0xa3, 0xe1, 0x98, 0x9a, 0x5d, 0xd4, 0xa3, 0x9a, 0x6b, 0x18, 0xee, 0x9a, 0x1a, 0xc1,
	0x6e, 0x0d, 0x3b, 0xe1, 0xb3, 0xbc, 0x83, 0x4b, 0xed, 0x24, 0x87, 0xdb, 0xae, 0x91, 0xc4, 0x69,
	0xc7, 0xaf, 0x72, 0xc6, 0x58, 0x47, 0xb6, 0xcf, 0xbb, 0x82, 0x94, 0xff, 0x4d, 0xe0, 0xf3, 0xe1,
	0x9f, 0x19, 0xd8, 0xa5, 0xb1, 0x5e, 0xcf, 0x5f, 0x38, 0xd1, 0xda, 0x30, 0x9b, 0x63, 0xd1, 0x69,
	0x17, 0x7b, 0xaf, 0x33, 0xa6, 0xc7, 0x73, 0x14, 0x38, 0xe6, 0xda, 0xa8, 0xa5, 0x6c, 0x8b, 0x3c,
	0xdc, 0xf0, 0x7e, 0xcf, 0x60, 0xc2, 0x95, 0x36, 0x25, 0x52, 0x34, 0xf8, 0x30, 0xc1, 0x7c, 0x97,
	0xd7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xb0, 0x4c, 0xbf, 0xba, 0x04, 0x00, 0x00,
}
