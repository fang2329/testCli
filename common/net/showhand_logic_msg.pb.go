// Code generated by protoc-gen-go. DO NOT EDIT.
// source: showhand_logic_msg.proto

package net

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 游戏状态
type MsgShowhandGameInfoRep struct {
	// 游戏属性
	CellScore *int64 `protobuf:"varint,1,opt,name=cell_score" json:"cell_score,omitempty"`
	// 加注信息
	DrawMaxScore  *int64  `protobuf:"varint,2,opt,name=draw_max_score" json:"draw_max_score,omitempty"`
	TurnMaxScore  *int64  `protobuf:"varint,3,opt,name=turn_max_score" json:"turn_max_score,omitempty"`
	TurnLessScore *int64  `protobuf:"varint,4,opt,name=turn_less_score" json:"turn_less_score,omitempty"`
	UserScore     []int64 `protobuf:"varint,5,rep,name=user_score" json:"user_score,omitempty"`
	TableScore    []int64 `protobuf:"varint,6,rep,name=table_score" json:"table_score,omitempty"`
	// 状态信息
	ShowHand   *uint32  `protobuf:"varint,7,opt,name=show_hand" json:"show_hand,omitempty"`
	CurUser    *uint32  `protobuf:"varint,8,opt,name=cur_user" json:"cur_user,omitempty"`
	PlayStatus []uint32 `protobuf:"varint,9,rep,name=play_status" json:"play_status,omitempty"`
	// 扑克信息
	HandCardData []*MsgCards `protobuf:"bytes,10,rep,name=hand_card_data" json:"hand_card_data,omitempty"`
	WaitTime     *uint32     `protobuf:"varint,11,opt,name=wait_time" json:"wait_time,omitempty"`
	// 历史积分
	HistoryScore     []int64 `protobuf:"varint,12,rep,name=history_score" json:"history_score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MsgShowhandGameInfoRep) Reset()                    { *m = MsgShowhandGameInfoRep{} }
func (m *MsgShowhandGameInfoRep) String() string            { return proto.CompactTextString(m) }
func (*MsgShowhandGameInfoRep) ProtoMessage()               {}
func (*MsgShowhandGameInfoRep) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *MsgShowhandGameInfoRep) GetCellScore() int64 {
	if m != nil && m.CellScore != nil {
		return *m.CellScore
	}
	return 0
}

func (m *MsgShowhandGameInfoRep) GetDrawMaxScore() int64 {
	if m != nil && m.DrawMaxScore != nil {
		return *m.DrawMaxScore
	}
	return 0
}

func (m *MsgShowhandGameInfoRep) GetTurnMaxScore() int64 {
	if m != nil && m.TurnMaxScore != nil {
		return *m.TurnMaxScore
	}
	return 0
}

func (m *MsgShowhandGameInfoRep) GetTurnLessScore() int64 {
	if m != nil && m.TurnLessScore != nil {
		return *m.TurnLessScore
	}
	return 0
}

func (m *MsgShowhandGameInfoRep) GetUserScore() []int64 {
	if m != nil {
		return m.UserScore
	}
	return nil
}

func (m *MsgShowhandGameInfoRep) GetTableScore() []int64 {
	if m != nil {
		return m.TableScore
	}
	return nil
}

func (m *MsgShowhandGameInfoRep) GetShowHand() uint32 {
	if m != nil && m.ShowHand != nil {
		return *m.ShowHand
	}
	return 0
}

func (m *MsgShowhandGameInfoRep) GetCurUser() uint32 {
	if m != nil && m.CurUser != nil {
		return *m.CurUser
	}
	return 0
}

func (m *MsgShowhandGameInfoRep) GetPlayStatus() []uint32 {
	if m != nil {
		return m.PlayStatus
	}
	return nil
}

func (m *MsgShowhandGameInfoRep) GetHandCardData() []*MsgCards {
	if m != nil {
		return m.HandCardData
	}
	return nil
}

func (m *MsgShowhandGameInfoRep) GetWaitTime() uint32 {
	if m != nil && m.WaitTime != nil {
		return *m.WaitTime
	}
	return 0
}

func (m *MsgShowhandGameInfoRep) GetHistoryScore() []int64 {
	if m != nil {
		return m.HistoryScore
	}
	return nil
}

// 游戏开始
type MsgShowhandStartRep struct {
	// 游戏属性
	CellScore *int64 `protobuf:"varint,1,opt,name=cell_score" json:"cell_score,omitempty"`
	// 下注信息
	DrawMaxScore  *int64 `protobuf:"varint,2,opt,name=draw_max_score" json:"draw_max_score,omitempty"`
	TurnMaxScore  *int64 `protobuf:"varint,3,opt,name=turn_max_score" json:"turn_max_score,omitempty"`
	TurnLessScore *int64 `protobuf:"varint,4,opt,name=turn_less_score" json:"turn_less_score,omitempty"`
	// 用户信息
	CurUser *uint32 `protobuf:"varint,5,opt,name=cur_user" json:"cur_user,omitempty"`
	// 扑克数据
	TableCardData []*MsgCards `protobuf:"bytes,6,rep,name=table_card_data" json:"table_card_data,omitempty"`
	// 历史积分
	HistoryScore     []int64 `protobuf:"varint,7,rep,name=history_score" json:"history_score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MsgShowhandStartRep) Reset()                    { *m = MsgShowhandStartRep{} }
func (m *MsgShowhandStartRep) String() string            { return proto.CompactTextString(m) }
func (*MsgShowhandStartRep) ProtoMessage()               {}
func (*MsgShowhandStartRep) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *MsgShowhandStartRep) GetCellScore() int64 {
	if m != nil && m.CellScore != nil {
		return *m.CellScore
	}
	return 0
}

func (m *MsgShowhandStartRep) GetDrawMaxScore() int64 {
	if m != nil && m.DrawMaxScore != nil {
		return *m.DrawMaxScore
	}
	return 0
}

func (m *MsgShowhandStartRep) GetTurnMaxScore() int64 {
	if m != nil && m.TurnMaxScore != nil {
		return *m.TurnMaxScore
	}
	return 0
}

func (m *MsgShowhandStartRep) GetTurnLessScore() int64 {
	if m != nil && m.TurnLessScore != nil {
		return *m.TurnLessScore
	}
	return 0
}

func (m *MsgShowhandStartRep) GetCurUser() uint32 {
	if m != nil && m.CurUser != nil {
		return *m.CurUser
	}
	return 0
}

func (m *MsgShowhandStartRep) GetTableCardData() []*MsgCards {
	if m != nil {
		return m.TableCardData
	}
	return nil
}

func (m *MsgShowhandStartRep) GetHistoryScore() []int64 {
	if m != nil {
		return m.HistoryScore
	}
	return nil
}

// 玩家放弃
type MsgShowhandGiveupReq struct {
	GiveUp           *uint32 `protobuf:"varint,1,opt,name=give_up" json:"give_up,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MsgShowhandGiveupReq) Reset()                    { *m = MsgShowhandGiveupReq{} }
func (m *MsgShowhandGiveupReq) String() string            { return proto.CompactTextString(m) }
func (*MsgShowhandGiveupReq) ProtoMessage()               {}
func (*MsgShowhandGiveupReq) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *MsgShowhandGiveupReq) GetGiveUp() uint32 {
	if m != nil && m.GiveUp != nil {
		return *m.GiveUp
	}
	return 0
}

type MsgShowhandGiveupRep struct {
	GiveupUser       *uint32 `protobuf:"varint,1,opt,name=giveup_user" json:"giveup_user,omitempty"`
	CurUser          *uint32 `protobuf:"varint,2,opt,name=cur_user" json:"cur_user,omitempty"`
	DrawMaxScore     *int64  `protobuf:"varint,3,opt,name=draw_max_score" json:"draw_max_score,omitempty"`
	TurnMaxScore     *int64  `protobuf:"varint,4,opt,name=turn_max_score" json:"turn_max_score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MsgShowhandGiveupRep) Reset()                    { *m = MsgShowhandGiveupRep{} }
func (m *MsgShowhandGiveupRep) String() string            { return proto.CompactTextString(m) }
func (*MsgShowhandGiveupRep) ProtoMessage()               {}
func (*MsgShowhandGiveupRep) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *MsgShowhandGiveupRep) GetGiveupUser() uint32 {
	if m != nil && m.GiveupUser != nil {
		return *m.GiveupUser
	}
	return 0
}

func (m *MsgShowhandGiveupRep) GetCurUser() uint32 {
	if m != nil && m.CurUser != nil {
		return *m.CurUser
	}
	return 0
}

func (m *MsgShowhandGiveupRep) GetDrawMaxScore() int64 {
	if m != nil && m.DrawMaxScore != nil {
		return *m.DrawMaxScore
	}
	return 0
}

func (m *MsgShowhandGiveupRep) GetTurnMaxScore() int64 {
	if m != nil && m.TurnMaxScore != nil {
		return *m.TurnMaxScore
	}
	return 0
}

// 玩家下注
type MsgShowhandAddscoreReq struct {
	Score            *int64 `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MsgShowhandAddscoreReq) Reset()                    { *m = MsgShowhandAddscoreReq{} }
func (m *MsgShowhandAddscoreReq) String() string            { return proto.CompactTextString(m) }
func (*MsgShowhandAddscoreReq) ProtoMessage()               {}
func (*MsgShowhandAddscoreReq) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

func (m *MsgShowhandAddscoreReq) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

type MsgShowhandAddscoreRep struct {
	CurUser          *uint32 `protobuf:"varint,1,opt,name=cur_user" json:"cur_user,omitempty"`
	AddScoreUser     *uint32 `protobuf:"varint,2,opt,name=add_score_user" json:"add_score_user,omitempty"`
	TurnLessScore    *int64  `protobuf:"varint,3,opt,name=turn_less_score" json:"turn_less_score,omitempty"`
	UserScoreCount   *int64  `protobuf:"varint,4,opt,name=user_score_count" json:"user_score_count,omitempty"`
	ShowHand         *uint32 `protobuf:"varint,5,opt,name=show_hand" json:"show_hand,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MsgShowhandAddscoreRep) Reset()                    { *m = MsgShowhandAddscoreRep{} }
func (m *MsgShowhandAddscoreRep) String() string            { return proto.CompactTextString(m) }
func (*MsgShowhandAddscoreRep) ProtoMessage()               {}
func (*MsgShowhandAddscoreRep) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{5} }

func (m *MsgShowhandAddscoreRep) GetCurUser() uint32 {
	if m != nil && m.CurUser != nil {
		return *m.CurUser
	}
	return 0
}

func (m *MsgShowhandAddscoreRep) GetAddScoreUser() uint32 {
	if m != nil && m.AddScoreUser != nil {
		return *m.AddScoreUser
	}
	return 0
}

func (m *MsgShowhandAddscoreRep) GetTurnLessScore() int64 {
	if m != nil && m.TurnLessScore != nil {
		return *m.TurnLessScore
	}
	return 0
}

func (m *MsgShowhandAddscoreRep) GetUserScoreCount() int64 {
	if m != nil && m.UserScoreCount != nil {
		return *m.UserScoreCount
	}
	return 0
}

func (m *MsgShowhandAddscoreRep) GetShowHand() uint32 {
	if m != nil && m.ShowHand != nil {
		return *m.ShowHand
	}
	return 0
}

// 发送扑克
type MsgShowhandSendcardRep struct {
	// 游戏信息
	CurUser      *uint32 `protobuf:"varint,1,opt,name=cur_user" json:"cur_user,omitempty"`
	StartChairid *uint32 `protobuf:"varint,2,opt,name=start_chairid" json:"start_chairid,omitempty"`
	TurnMaxScore *int64  `protobuf:"varint,3,opt,name=turn_max_score" json:"turn_max_score,omitempty"`
	// 扑克信息
	CardData         []*MsgCards `protobuf:"bytes,4,rep,name=card_data" json:"card_data,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *MsgShowhandSendcardRep) Reset()                    { *m = MsgShowhandSendcardRep{} }
func (m *MsgShowhandSendcardRep) String() string            { return proto.CompactTextString(m) }
func (*MsgShowhandSendcardRep) ProtoMessage()               {}
func (*MsgShowhandSendcardRep) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{6} }

func (m *MsgShowhandSendcardRep) GetCurUser() uint32 {
	if m != nil && m.CurUser != nil {
		return *m.CurUser
	}
	return 0
}

func (m *MsgShowhandSendcardRep) GetStartChairid() uint32 {
	if m != nil && m.StartChairid != nil {
		return *m.StartChairid
	}
	return 0
}

func (m *MsgShowhandSendcardRep) GetTurnMaxScore() int64 {
	if m != nil && m.TurnMaxScore != nil {
		return *m.TurnMaxScore
	}
	return 0
}

func (m *MsgShowhandSendcardRep) GetCardData() []*MsgCards {
	if m != nil {
		return m.CardData
	}
	return nil
}

// 游戏结束
type MsgShowhandGameOverRep struct {
	CardData  []*MsgCards `protobuf:"bytes,1,rep,name=card_data" json:"card_data,omitempty"`
	GameScore []int64     `protobuf:"varint,2,rep,name=game_score" json:"game_score,omitempty"`
	// 历史积分
	HistoryScore     []int64 `protobuf:"varint,3,rep,name=history_score" json:"history_score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MsgShowhandGameOverRep) Reset()                    { *m = MsgShowhandGameOverRep{} }
func (m *MsgShowhandGameOverRep) String() string            { return proto.CompactTextString(m) }
func (*MsgShowhandGameOverRep) ProtoMessage()               {}
func (*MsgShowhandGameOverRep) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{7} }

func (m *MsgShowhandGameOverRep) GetCardData() []*MsgCards {
	if m != nil {
		return m.CardData
	}
	return nil
}

func (m *MsgShowhandGameOverRep) GetGameScore() []int64 {
	if m != nil {
		return m.GameScore
	}
	return nil
}

func (m *MsgShowhandGameOverRep) GetHistoryScore() []int64 {
	if m != nil {
		return m.HistoryScore
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgShowhandGameInfoRep)(nil), "net.msg_showhand_game_info_rep")
	proto.RegisterType((*MsgShowhandStartRep)(nil), "net.msg_showhand_start_rep")
	proto.RegisterType((*MsgShowhandGiveupReq)(nil), "net.msg_showhand_giveup_req")
	proto.RegisterType((*MsgShowhandGiveupRep)(nil), "net.msg_showhand_giveup_rep")
	proto.RegisterType((*MsgShowhandAddscoreReq)(nil), "net.msg_showhand_addscore_req")
	proto.RegisterType((*MsgShowhandAddscoreRep)(nil), "net.msg_showhand_addscore_rep")
	proto.RegisterType((*MsgShowhandSendcardRep)(nil), "net.msg_showhand_sendcard_rep")
	proto.RegisterType((*MsgShowhandGameOverRep)(nil), "net.msg_showhand_game_over_rep")
}

func init() { proto.RegisterFile("showhand_logic_msg.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x93, 0x4d, 0x92, 0xda, 0x30,
	0x10, 0x85, 0xcb, 0x68, 0x18, 0x86, 0x26, 0x06, 0xa2, 0x29, 0x66, 0x1c, 0x56, 0x8e, 0x17, 0x89,
	0x6b, 0x16, 0x2c, 0x72, 0x21, 0x95, 0x46, 0x52, 0xc0, 0x29, 0x63, 0x39, 0x2d, 0x79, 0x08, 0xab,
	0x1c, 0x20, 0x77, 0xc9, 0x35, 0x72, 0xad, 0x94, 0xda, 0xa6, 0xc0, 0xc1, 0x2c, 0xb3, 0xd4, 0x6b,
	0xfd, 0x7c, 0xef, 0x75, 0x0b, 0x12, 0xb7, 0xb3, 0x87, 0x9d, 0xac, 0xb4, 0x28, 0xed, 0xb6, 0x50,
	0x62, 0xef, 0xb6, 0x9b, 0x1a, 0xad, 0xb7, 0x9c, 0x55, 0xc6, 0xaf, 0x57, 0xaf, 0xd2, 0x99, 0x20,
	0x0a, 0xe7, 0xb1, 0x51, 0xbe, 0xad, 0xad, 0x97, 0x06, 0xd1, 0xa2, 0x50, 0x56, 0x9b, 0x56, 0xc9,
	0x7e, 0x8f, 0x60, 0x4d, 0xdb, 0x4e, 0xd7, 0x6d, 0xe5, 0xde, 0x88, 0xa2, 0xfa, 0x6a, 0x05, 0x9a,
	0x9a, 0x73, 0x00, 0x65, 0xca, 0x52, 0x38, 0x65, 0xd1, 0x24, 0x51, 0x1a, 0xe5, 0x8c, 0x3f, 0xc1,
	0x5c, 0xa3, 0x3c, 0x88, 0xbd, 0xfc, 0xd1, 0xe9, 0xa3, 0x93, 0xee, 0x1b, 0xac, 0x2e, 0x74, 0x46,
	0xfa, 0x33, 0x2c, 0x48, 0x2f, 0x8d, 0x73, 0x5d, 0xe1, 0x8e, 0x0a, 0x1c, 0xa0, 0x71, 0x06, 0x3b,
	0x6d, 0x9c, 0xb2, 0x9c, 0xf1, 0x47, 0x98, 0x79, 0xf9, 0x5a, 0x9a, 0x4e, 0xbc, 0x27, 0xf1, 0x3d,
	0x4c, 0x03, 0x9f, 0x08, 0x80, 0xc9, 0x24, 0x8d, 0xf2, 0x98, 0x2f, 0xe1, 0x41, 0x35, 0x28, 0xc2,
	0xf9, 0xe4, 0x81, 0x94, 0x47, 0x98, 0xd5, 0xa5, 0x3c, 0x0a, 0xe7, 0xa5, 0x6f, 0x5c, 0x32, 0x4d,
	0x59, 0x1e, 0xf3, 0x4f, 0x30, 0x27, 0x57, 0x4a, 0xa2, 0x16, 0x5a, 0x7a, 0x99, 0x40, 0xca, 0xf2,
	0xd9, 0x97, 0xf9, 0xa6, 0x32, 0x7e, 0x13, 0x8c, 0x87, 0x8a, 0x0b, 0x2f, 0x1c, 0x64, 0xe1, 0x85,
	0x2f, 0xf6, 0x26, 0x99, 0xd1, 0x7d, 0x2b, 0x88, 0x77, 0x85, 0xf3, 0x16, 0x8f, 0x1d, 0xcb, 0xbb,
	0xc0, 0x92, 0xfd, 0x89, 0xe0, 0xa9, 0x17, 0x98, 0xf3, 0x12, 0xfd, 0xff, 0x0f, 0xeb, 0xd2, 0xf0,
	0x98, 0x00, 0x3f, 0xc3, 0xa2, 0x8d, 0xea, 0x6c, 0xee, 0x7e, 0xd0, 0xdc, 0x95, 0x93, 0x09, 0x39,
	0x79, 0x81, 0xe7, 0x7e, 0xe7, 0x8b, 0x37, 0xd3, 0xd4, 0x02, 0xcd, 0x77, 0xbe, 0x80, 0x49, 0x58,
	0x89, 0xa6, 0x26, 0x1b, 0x71, 0x56, 0xdf, 0xda, 0x5b, 0x87, 0xdc, 0xbb, 0x15, 0xb1, 0x45, 0x57,
	0xed, 0x19, 0x91, 0x72, 0x1d, 0x04, 0xbb, 0x11, 0x04, 0xf9, 0xcd, 0x5e, 0xe0, 0x43, 0xef, 0x45,
	0xa9, 0x35, 0x95, 0x89, 0x2f, 0x86, 0xf1, 0x45, 0xc8, 0xd9, 0xaf, 0xe8, 0xf6, 0xe6, 0xba, 0xc7,
	0x12, 0x9d, 0x58, 0xa4, 0xd6, 0xed, 0x73, 0x97, 0x8c, 0x03, 0xe1, 0xb7, 0x90, 0x09, 0x2c, 0xcf,
	0x93, 0x2a, 0x94, 0x6d, 0x2a, 0xdf, 0xb5, 0xa5, 0x37, 0x9a, 0xd4, 0x97, 0xec, 0xe7, 0x3f, 0x30,
	0xce, 0x54, 0x9a, 0x5a, 0x34, 0x0c, 0xb3, 0x82, 0xb8, 0x1d, 0x21, 0xb5, 0x93, 0x05, 0x16, 0xfa,
	0x9c, 0xd7, 0xe0, 0x80, 0x7c, 0x84, 0xe9, 0xb9, 0xdf, 0x77, 0x43, 0xfd, 0xce, 0xbe, 0x0d, 0x7d,
	0x69, 0xfb, 0x66, 0x90, 0x08, 0x7a, 0x17, 0x44, 0x83, 0x03, 0xc3, 0x01, 0xe8, 0xcc, 0x69, 0x60,
	0xc3, 0x1f, 0xbc, 0x1a, 0x22, 0x16, 0xe4, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x52, 0x25, 0x76,
	0xc7, 0x88, 0x04, 0x00, 0x00,
}
